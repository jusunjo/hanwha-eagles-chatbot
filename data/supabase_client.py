#!/usr/bin/env python3
"""
Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Í¥ÄÎ¶¨
"""

import os
from typing import Dict, Any, Optional, List
from datetime import datetime
from supabase import create_client, Client
from dotenv import load_dotenv

# ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎìú
load_dotenv()

class SupabaseManager:
    def __init__(self):
        """Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî"""
        try:
            supabase_url = os.getenv("SUPABASE_URL")
            # ÏÑúÎπÑÏä§ ÌÇ§ Ïö∞ÏÑ† ÏÇ¨Ïö© (RLS Ïö∞Ìöå)
            supabase_key = os.getenv("SUPABASE_SERVICE_KEY") or os.getenv("SUPABASE_ANON_KEY")
            
            if not supabase_url or not supabase_key:
                raise ValueError("SUPABASE_URLÍ≥º SUPABASE_SERVICE_KEY ÎòêÎäî SUPABASE_ANON_KEY ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.")
            
            # Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ± (Í∏∞Î≥∏ ÏòµÏÖòÎßå ÏÇ¨Ïö©)
            self.supabase: Client = create_client(supabase_url, supabase_key)
            print("‚úÖ Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
            
        except Exception as e:
            print(f"‚ùå Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {e}")
            raise e
    
    def create_tables(self) -> bool:
        """ÌïÑÏöîÌïú ÌÖåÏù¥Î∏îÎì§Ïù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏ÌïòÍ≥† ÏóÜÏúºÎ©¥ ÏÉùÏÑ±"""
        try:
            # player_info ÌÖåÏù¥Î∏î ÌôïÏù∏
            try:
                self.supabase.table("player_info").select("id").limit(1).execute()
                print("‚úÖ player_info ÌÖåÏù¥Î∏î Ï°¥Ïû¨ ÌôïÏù∏")
            except:
                print("‚ùå player_info ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.")
                return False
            
            # game_schedule ÌÖåÏù¥Î∏î ÌôïÏù∏
            try:
                self.supabase.table("game_schedule").select("id").limit(1).execute()
                print("‚úÖ game_schedule ÌÖåÏù¥Î∏î Ï°¥Ïû¨ ÌôïÏù∏")
            except:
                print("‚ùå game_schedule ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ïò§Î•ò: {e}")
            return False
    
    def save_player_data(self, player_data: Dict[str, Any]) -> bool:
        """ÏÑ†Ïàò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•"""
        try:
            player_name = player_data.get("playerName")
            if not player_name:
                print("‚ùå ÏÑ†Ïàò Ïù¥Î¶ÑÏù¥ ÏóÜÏäµÎãàÎã§.")
                return False
            
            # Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
            existing = self.supabase.table("player_info").select("*").eq("playerName", player_name).execute()
            
            data_to_save = {
                "playerName": player_name,
                "record": player_data.get("record", {}),
                "chart": player_data.get("chart", {}),
                "vsTeam": player_data.get("vsTeam", {}),
                "basicRecord": player_data.get("basicRecord", {})
            }
            
            if existing.data:
                # Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
                result = self.supabase.table("player_info").update(data_to_save).eq("playerName", player_name).execute()
                print(f"‚úÖ {player_name} ÏÑ†Ïàò Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å")
            else:
                # ÏÉà Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
                result = self.supabase.table("player_info").insert(data_to_save).execute()
                print(f"‚úÖ {player_name} ÏÑ†Ïàò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏôÑÎ£å")
            
            return True
            
        except Exception as e:
            print(f"‚ùå ÏÑ†Ïàò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïò§Î•ò: {e}")
            return False
    
    def get_player_data(self, player_name: str) -> Optional[Dict[str, Any]]:
        """ÏÑ†Ïàò Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå"""
        try:
            result = self.supabase.table("player_info").select("*").eq("playerName", player_name).execute()
            
            if result.data:
                player_data = result.data[0]
                return {
                    "playerName": player_data["playerName"],
                    "record": player_data["record"],
                    "chart": player_data["chart"],
                    "vsTeam": player_data["vsTeam"],
                    "basicRecord": player_data["basicRecord"]
                }
            else:
                print(f"‚ùå {player_name} ÏÑ†Ïàò Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                return None
                
        except Exception as e:
            print(f"‚ùå ÏÑ†Ïàò Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò: {e}")
            return None
    
    def search_players(self, search_term: str) -> List[Dict[str, Any]]:
        """ÏÑ†Ïàò Í≤ÄÏÉâ"""
        try:
            result = self.supabase.table("player_info").select("*").ilike("playerName", f"%{search_term}%").execute()
            return result.data or []
            
        except Exception as e:
            print(f"‚ùå ÏÑ†Ïàò Í≤ÄÏÉâ Ïò§Î•ò: {e}")
            return []
    
    def get_all_players(self) -> List[Dict[str, Any]]:
        """Î™®Îì† ÏÑ†Ïàò Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (pcode ÌÖåÏù¥Î∏îÏóêÏÑú)"""
        try:
            result = self.supabase.table("pcode").select("*").execute()
            return result.data or []
            
        except Exception as e:
            print(f"‚ùå Î™®Îì† ÏÑ†Ïàò Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò: {e}")
            return []
    
    def get_player_mapping(self) -> Dict[str, str]:
        """ÏÑ†Ïàò Îß§Ìïë Ï†ïÎ≥¥ Ï°∞Ìöå (playerName -> pcode)"""
        try:
            result = self.supabase.table("pcode").select("playerName, pcode").execute()
            
            if result.data:
                mapping = {}
                for player in result.data:
                    player_name = player.get("playerName")
                    pcode = player.get("pcode")
                    if player_name and pcode:
                        mapping[player_name] = pcode
                return mapping
            else:
                print("‚ùå ÏÑ†Ïàò Îß§Ìïë Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                return {}
                
        except Exception as e:
            print(f"‚ùå ÏÑ†Ïàò Îß§Ìïë Ï°∞Ìöå Ïò§Î•ò: {e}")
            return {}
    
    def get_pcode_by_name(self, player_name: str) -> Optional[str]:
        """ÏÑ†Ïàò Ïù¥Î¶ÑÏúºÎ°ú pcode Ï°∞Ìöå"""
        try:
            result = self.supabase.table("pcode").select("pcode").eq("playerName", player_name).execute()
            
            if result.data:
                return result.data[0].get("pcode")
            else:
                print(f"‚ùå {player_name} ÏÑ†ÏàòÏùò pcodeÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                return None
                
        except Exception as e:
            print(f"‚ùå pcode Ï°∞Ìöå Ïò§Î•ò: {e}")
            return None
    
    def get_game_schedule(self, date: str = None) -> List[Dict[str, Any]]:
        """Í≤ΩÍ∏∞ ÏùºÏ†ï Ï°∞Ìöå"""
        try:
            if date:
                result = self.supabase.table("game_schedule").select("*").eq("date", date).execute()
            else:
                result = self.supabase.table("game_schedule").select("*").order("date").execute()
            
            return result.data or []
            
        except Exception as e:
            print(f"‚ùå Í≤ΩÍ∏∞ ÏùºÏ†ï Ï°∞Ìöå Ïò§Î•ò: {e}")
            return []
    def get_future_games(self) -> List[Dict[str, Any]]:
        """Ïò§Îäò ÎÇ†Ïßú Í∏∞Ï§ÄÏúºÎ°ú ÎØ∏Îûò Í≤ΩÍ∏∞Îì§Îßå Ï°∞Ìöå"""
        try:
            from datetime import datetime
            
            # Ïò§Îäò ÎÇ†ÏßúÎ•º MM.DD ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
            today = datetime.now()
            today_str = today.strftime('%m.%d')
            
            # Î™®Îì† Í≤ΩÍ∏∞ ÏùºÏ†ï Í∞ÄÏ†∏Ïò§Í∏∞
            all_games = self.get_game_schedule()
            
            # Ïò§Îäò Ïù¥ÌõÑÏùò Í≤ΩÍ∏∞Îì§Îßå ÌïÑÌÑ∞ÎßÅ
            future_games = []
            for game in all_games:
                game_date = game.get('date', '')
                
                # ÎÇ†Ïßú ÌòïÏãù Ï†ïÍ∑úÌôî (ÏöîÏùº Ï†úÍ±∞)
                if '(' in game_date:
                    date_part = game_date.split('(')[0]
                else:
                    date_part = game_date
                
                # Ïò§Îäò Ïù¥ÌõÑÏùò Í≤ΩÍ∏∞Ïù∏ÏßÄ ÌôïÏù∏
                if self._is_future_date(date_part, today_str):
                    future_games.append(game)
            
            print(f"üìÖ Ïò§Îäò({today_str}) Í∏∞Ï§Ä ÎØ∏Îûò Í≤ΩÍ∏∞: {len(future_games)}Í∞ú")
            return future_games
            
        except Exception as e:
            print(f"‚ùå ÎØ∏Îûò Í≤ΩÍ∏∞ Ï°∞Ìöå Ïò§Î•ò: {e}")
            return []
    
    def _is_future_date(self, game_date: str, today_date: str) -> bool:
        """Í≤åÏûÑ ÎÇ†ÏßúÍ∞Ä Ïò§Îäò Ïù¥ÌõÑÏù∏ÏßÄ ÌôïÏù∏"""
        try:
            # MM.DD ÌòïÏãù ÎπÑÍµê
            game_month, game_day = map(int, game_date.split('.'))
            today_month, today_day = map(int, today_date.split('.'))
            
            # ÏõîÏù¥ Îã§Î•¥Î©¥ Ïõî ÎπÑÍµê
            if game_month != today_month:
                return game_month > today_month
            
            # Í∞ôÏùÄ ÏõîÏù¥Î©¥ Ïùº ÎπÑÍµê
            return game_day >= today_day
            
        except Exception as e:
            print(f"‚ùå ÎÇ†Ïßú ÎπÑÍµê Ïò§Î•ò: {e}")
            return False