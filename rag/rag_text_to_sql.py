#!/usr/bin/env python3
"""
RAG Í∏∞Î∞ò Text-to-SQL ÏãúÏä§ÌÖú
ÎèôÏ†Å Ïä§ÌÇ§Îßà Ï†ïÎ≥¥Î•º Ï†úÍ≥µÌïòÏó¨ ÌïòÎìúÏΩîÎî©Îêú ÌîÑÎ°¨ÌîÑÌä∏Î•º Ï†úÍ±∞
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from data.supabase_client import SupabaseManager
from rag.schema_manager import SchemaManager
from data.game_record_service import game_record_service
import re
import json

class RAGTextToSQL:
    def __init__(self):
        """RAG Í∏∞Î∞ò Text-to-SQL Ï¥àÍ∏∞Ìôî"""
        try:
            self.llm = ChatOpenAI(
                model="gpt-4o-mini",
                temperature=0.1,
                api_key=os.getenv("OPENAI_API_KEY")
            )
            self.supabase = SupabaseManager()
            self.schema_manager = SchemaManager()
            
            print("‚úÖ RAG Í∏∞Î∞ò Text-to-SQL Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
            
        except Exception as e:
            print(f"‚ùå RAG Í∏∞Î∞ò Text-to-SQL Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {e}")
            raise e
    
    def generate_sql(self, question: str) -> str:
        """ÏûêÏó∞Ïñ¥ ÏßàÎ¨∏ÏùÑ SQLÎ°ú Î≥ÄÌôò (RAG Í∏∞Î∞ò)"""
        try:
            # ÎèôÏ†Å ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
            prompt = self.schema_manager.generate_dynamic_prompt(question)
            
            # SQL ÏÉùÏÑ±
            response = self.llm.invoke(prompt)
            sql = self._extract_sql(response.content)
            
            print(f"üîç ÏÉùÏÑ±Îêú SQL: {sql}")
            return sql
            
        except Exception as e:
            print(f"‚ùå SQL ÏÉùÏÑ± Ïò§Î•ò: {e}")
            return ""
    
    def _extract_sql(self, response: str) -> str:
        """ÏùëÎãµÏóêÏÑú SQL Ï∂îÏ∂ú"""
        # SQL Ï†ïÎ¶¨
        sql = re.sub(r'```sql\s*', '', response)
        sql = re.sub(r'```\s*', '', sql)
        sql = sql.strip()
        
        # ÏÑ§Î™Ö ÌÖçÏä§Ìä∏Í∞Ä Ìè¨Ìï®Îêú Í≤ΩÏö∞ SQLÎßå Ï∂îÏ∂ú
        sql_match = re.search(r'SELECT.*?;', sql, re.DOTALL | re.IGNORECASE)
        if sql_match:
            sql = sql_match.group(0).strip()
        
        return sql
    
    def execute_sql(self, sql: str, question: str = "") -> list:
        """SQL Ïã§Ìñâ"""
        try:
            # Í∞ÑÎã®Ìïú SELECT ÏøºÎ¶¨Îßå ÏßÄÏõê
            if not sql.upper().startswith('SELECT'):
                return []
            
            # DB_ERROR Ï≤¥ÌÅ¨
            if "DB_ERROR:" in sql.upper():
                return [sql]
            
            # game_schedule ÌÖåÏù¥Î∏î Ï°∞Ìöå
            if "game_schedule" in sql.lower():
                return self._get_game_schedule_data(sql, question)
            
            # game_result ÌÖåÏù¥Î∏î Ï°∞Ìöå
            if "game_result" in sql.lower():
                return self._get_game_result_data(sql)
            
            # ÏÑ†Ïàò Í¥ÄÎ†® ÌÖåÏù¥Î∏î Ï°∞Ìöå
            if any(table in sql.lower() for table in ['player_season_stats', 'player_game_stats']):
                return self._query_player_data(sql, question)
                
        except Exception as e:
            print(f"‚ùå Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò: {e}")
            return ["DB_ERROR: Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."]
    
    def _query_player_data(self, sql: str, question: str = "") -> list:
        """ÏÑ†Ïàò Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå"""
        try:
            # SQLÏóêÏÑú ÏÑ†ÏàòÎ™Ö Ï∂îÏ∂ú
            player_names = self._extract_player_names_from_sql(sql)
            print(f"üîç SQLÏóêÏÑú Ï∂îÏ∂úÎêú ÏÑ†ÏàòÎ™Ö: {player_names}")
            
            if player_names:
                # ÌäπÏ†ï ÏÑ†ÏàòÎ™ÖÏù¥ ÏûàÎäî Í≤ΩÏö∞
                all_data = []
                for player_name in player_names:
                    print(f"üîç ÏÑ†Ïàò '{player_name}' Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ï§ë...")
                    player_data = self.supabase.get_player_complete_data(player_name)
                    if player_data:
                        print(f"‚úÖ ÏÑ†Ïàò '{player_name}' Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏÑ±Í≥µ")
                        all_data.append(player_data)
                    else:
                        print(f"‚ùå ÏÑ†Ïàò '{player_name}' Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                return all_data
            else:
                # ÏÑ†ÏàòÎ™ÖÏù¥ ÏóÜÎäî Í≤ΩÏö∞ (ÌåÄÎ≥Ñ ÌÜµÍ≥Ñ Ï°∞Ìöå Îì±) - ÏßÅÏ†ë SQL Ïã§Ìñâ
                print("üîç ÏÑ†ÏàòÎ™ÖÏù¥ ÏóÜÏúºÎØÄÎ°ú ÏßÅÏ†ë SQL Ïã§Ìñâ")
                return self._execute_direct_sql(sql, question)
        except Exception as e:
            print(f"‚ùå ÏÑ†Ïàò Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïò§Î•ò: {e}")
            return []
    
    def _execute_direct_sql(self, sql: str, question: str = "") -> list:
        """SQLÏùÑ ÏßÅÏ†ë Ïã§ÌñâÌïòÏó¨ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå"""
        try:
            # SQL ÌååÏã±ÌïòÏó¨ WHERE Ï°∞Í±¥ Ï∂îÏ∂ú
            where_conditions = self._extract_where_conditions(sql)
            print(f"üîç Ï∂îÏ∂úÎêú WHERE Ï°∞Í±¥: {where_conditions}")
            
            # Ìà¨Ïàò/ÌÉÄÏûê Íµ¨Î∂ÑÏùÑ ÏúÑÌïú ÌïÑÌÑ∞ÎßÅ
            player_type = self._determine_player_type(sql)
            print(f"üîç ÏÑ†Ïàò Ïú†Ìòï: {player_type}")
            
            # player_season_stats ÌÖåÏù¥Î∏î Ï°∞Ìöå
            query = self.supabase.supabase.table("player_season_stats").select("*")
            
            # WHERE Ï°∞Í±¥ Ï†ÅÏö©
            for col, val in where_conditions.items():
                query = query.eq(col, val)
            
            # Ìà¨Ïàò/ÌÉÄÏûê ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©
            if player_type == "batter":
                # ÌÉÄÏûê: hraÍ∞Ä NULLÏù¥ ÏïÑÎãå ÏÑ†ÏàòÎì§
                query = query.not_.is_("hra", "null")
            elif player_type == "pitcher":
                # Ìà¨Ïàò: eraÍ∞Ä NULLÏù¥ ÏïÑÎãå ÏÑ†ÏàòÎì§
                query = query.not_.is_("era", "null")
            
            # hra Ïª¨ÎüºÏùÑ ÏÇ¨Ïö©ÌïòÎäî Î™®Îì† ÏßàÎ¨∏Ïóê ÎåÄÌï¥ NULL Í∞í Ï†úÏô∏
            if "hra" in sql.lower() or "ÌÉÄÏú®" in question:
                print("üîç hra NULL Í∞í Ï†úÏô∏ ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©")
                query = query.not_.is_("hra", "null")
            
            # Í∑úÏ†ïÌÉÄÏÑù ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö© (ÌÉÄÏú® Í¥ÄÎ†® ÏßàÎ¨∏Ïù∏ Í≤ΩÏö∞)
            if ("hra" in sql.lower() or "ÌÉÄÏú®" in question) and player_type in ["batter", "both"]:
                # Í∞Å ÌåÄÎ≥ÑÎ°ú Í∑úÏ†ïÌÉÄÏÑù Í≥ÑÏÇ∞
                team_games = self._get_team_games_count()
                print(f"üîç ÌåÄÎ≥Ñ Í≤ΩÍ∏∞ Ïàò: {team_games}")
                
                # ÌÉÄÏú® ÏßàÎ¨∏Ïù∏ Í≤ΩÏö∞ ÌÉÄÏûêÎßå ÌïÑÌÑ∞ÎßÅ
                if player_type == "both":
                    query = query.not_.is_("hra", "null")
                
                # ÌåÄÎ≥Ñ Í∑úÏ†ïÌÉÄÏÑù ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©
                if where_conditions.get('team'):
                    # ÌäπÏ†ï ÌåÄ ÏßàÎ¨∏Ïù∏ Í≤ΩÏö∞
                    team = where_conditions['team']
                    if team in team_games:
                        required_pa = int(team_games[team] * 3.1)
                        print(f"üîç {team} ÌåÄ Í∑úÏ†ïÌÉÄÏÑù ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©: {required_pa}ÌÉÄÏÑù Ïù¥ÏÉÅ")
                        query = query.gte("ab", required_pa)
                    else:
                        print(f"‚ö†Ô∏è {team} ÌåÄÏùò Í≤ΩÍ∏∞ ÏàòÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå")
                else:
                    # Î™®Îì† ÌåÄ ÏßàÎ¨∏Ïù∏ Í≤ΩÏö∞ - ÌèâÍ∑† Í≤ΩÍ∏∞ Ïàò ÏÇ¨Ïö©
                    avg_games = sum(team_games.values()) / len(team_games)
                    required_pa = int(avg_games * 3.1)
                    print(f"üîç Ï†ÑÏ≤¥ ÌåÄ ÌèâÍ∑† Í∑úÏ†ïÌÉÄÏÑù ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©: {required_pa}ÌÉÄÏÑù Ïù¥ÏÉÅ")
                    query = query.gte("ab", required_pa)
            
            # ORDER BYÏôÄ LIMIT Ï≤òÎ¶¨ - ÏùºÎ∞òÏ†ÅÏù∏ Î∞©ÏãùÏúºÎ°ú Ï≤òÎ¶¨
            order_by_match = re.search(r'ORDER BY\s+(\w+)\s+(DESC|ASC)', sql, re.IGNORECASE)
            limit_match = re.search(r'LIMIT\s+(\d+)', sql, re.IGNORECASE)
            
            if order_by_match and limit_match:
                # ORDER BY + LIMIT Ï°∞Ìï©Ïù∏ Í≤ΩÏö∞: Î™®Îì† Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏ÏôÄÏÑú Ï†ïÎ†¨ ÌõÑ Ï†úÌïú
                column = order_by_match.group(1).lower()
                direction = order_by_match.group(2).upper()
                limit_count = int(limit_match.group(1))
                
                result = query.execute()
                data = result.data or []
                
                # PythonÏóêÏÑú Ï†ïÎ†¨ (NULL Í∞íÏùÄ 0ÏúºÎ°ú Ï≤òÎ¶¨)
                reverse = (direction == 'DESC')
                data = sorted(data, key=lambda x: x.get(column, 0) or 0, reverse=reverse)
                data = data[:limit_count]
            elif order_by_match:
                # ORDER BYÎßå ÏûàÎäî Í≤ΩÏö∞: Supabase ORDER BY ÏÇ¨Ïö©
                column = order_by_match.group(1).lower()
                direction = order_by_match.group(2).upper()
                query = query.order(column, desc=(direction == 'DESC'))
                result = query.execute()
                data = result.data or []
            elif limit_match:
                # LIMITÎßå ÏûàÎäî Í≤ΩÏö∞
                limit_count = int(limit_match.group(1))
                query = query.limit(limit_count)
                result = query.execute()
                data = result.data or []
            else:
                # ORDER BYÏôÄ LIMITÏù¥ ÏóÜÎäî Í≤ΩÏö∞
                result = query.execute()
                data = result.data or []
            
            print(f"‚úÖ ÏßÅÏ†ë SQL Ïã§Ìñâ Í≤∞Í≥º: {len(data)}Í∞ú")
            if data:
                print(f"üîç Ï≤´ Î≤àÏß∏ Í≤∞Í≥º: {data[0].get('player_name', 'Unknown')} - ÌôàÎü∞: {data[0].get('hr', 0)}")
            return data
            
        except Exception as e:
            print(f"‚ùå ÏßÅÏ†ë SQL Ïã§Ìñâ Ïò§Î•ò: {e}")
            return []
    
    def _extract_where_conditions(self, sql: str) -> dict:
        """SQLÏóêÏÑú WHERE Ï°∞Í±¥ Ï∂îÏ∂ú"""
        import re
        conditions = {}
        
        # WHERE Ï†à Ï∞æÍ∏∞
        where_match = re.search(r'WHERE\s+(.+?)(?:\s+ORDER|\s+LIMIT|$)', sql, re.IGNORECASE | re.DOTALL)
        if where_match:
            where_clause = where_match.group(1)
            
            # Í∞Å Ï°∞Í±¥ ÌååÏã± (column = 'value' ÌòïÌÉú)
            pattern = r"(\w+)\s*=\s*['\"]([^'\"]+)['\"]"
            matches = re.findall(pattern, where_clause)
            
            for col, val in matches:
                conditions[col] = val
        
        return conditions
    
    def _determine_player_type(self, sql: str) -> str:
        """SQLÏóêÏÑú Ìà¨Ïàò/ÌÉÄÏûê Ïú†Ìòï ÌåêÎã®"""
        import re
        
        # Ìà¨Ïàò Í¥ÄÎ†® ÌÇ§ÏõåÎìú (Î™ÖÌôïÌïú Ìà¨Ïàò Ï†ÑÏö© ÌÇ§ÏõåÎìúÎßå)
        pitcher_keywords = [
            'era', 'w', 'l', 'sv', 'hold', 'cg', 'sho', 'bf', 'inn', 'er', 
            'whip', 'k9', 'bb9', 'kbb', 'qs', 'wra', 'Ìà¨Ïàò', 'ÏÑ†Î∞ú', 'Íµ¨Ïõê', 'ÎßàÎ¨¥Î¶¨'
        ]
        
        # ÌÉÄÏûê Í¥ÄÎ†® ÌÇ§ÏõåÎìú (Î™ÖÌôïÌïú ÌÉÄÏûê Ï†ÑÏö© ÌÇ§ÏõåÎìú)
        batter_keywords = [
            'hra', 'hr', 'h2', 'h3', 'rbi', 'ab', 'obp', 'slg', 'ops', 'isop', 
            'babip', 'wrcplus', 'woba', 'wpa', 'ÌÉÄÏûê', 'ÌÉÄÏú®', 'ÌôàÎü∞', 'ÌÉÄÏ†ê', 
            'ÎìùÏ†ê', 'ÏïàÌÉÄ', 'ÌÉÄÏàò', 'Ï∂úÎ£®Ïú®', 'Ïû•ÌÉÄÏú®'
        ]
        
        # Í≥µÌÜµ ÌÇ§ÏõåÎìú (Ìà¨ÏàòÏôÄ ÌÉÄÏûê Î™®Îëê ÏÇ¨Ïö©)
        common_keywords = ['run', 'hit', 'bb', 'hp', 'kk']
        
        sql_lower = sql.lower()
        
        # Ìà¨Ïàò ÌÇ§ÏõåÎìú Ï≤¥ÌÅ¨ (Í≥µÌÜµ ÌÇ§ÏõåÎìú Ï†úÏô∏)
        pitcher_score = sum(1 for keyword in pitcher_keywords if keyword in sql_lower)
        
        # ÌÉÄÏûê ÌÇ§ÏõåÎìú Ï≤¥ÌÅ¨ (Í≥µÌÜµ ÌÇ§ÏõåÎìú Ï†úÏô∏)
        batter_score = sum(1 for keyword in batter_keywords if keyword in sql_lower)
        
        # ORDER BY Ï†àÏóêÏÑú Ïª¨ÎüºÎ™ÖÏúºÎ°úÎèÑ ÌåêÎã® (Í∞ÄÏ§ëÏπò Îß§Ïö∞ ÎÜíÍ≤å)
        # ÌÖåÏù¥Î∏î Î≥ÑÏπ≠Ïù¥ ÏûàÎäî Í≤ΩÏö∞ÏôÄ ÏóÜÎäî Í≤ΩÏö∞ Î™®Îëê Ï≤òÎ¶¨
        order_by_match = re.search(r'ORDER BY\s+(?:[\w.]+\.)?(\w+)', sql, re.IGNORECASE)
        if order_by_match:
            column = order_by_match.group(1).lower()
            if column in pitcher_keywords:
                pitcher_score += 10  # ORDER BYÎäî Îß§Ïö∞ Ï§ëÏöîÌïú Îã®ÏÑú
            elif column in batter_keywords:
                batter_score += 10  # ORDER BYÎäî Îß§Ïö∞ Ï§ëÏöîÌïú Îã®ÏÑú
        
        # SELECT Ï†àÏóêÏÑú Ïª¨ÎüºÎ™ÖÏúºÎ°úÎèÑ ÌåêÎã® (Í∞ÄÏ§ëÏπò ÎÜíÍ≤å)
        select_match = re.search(r'SELECT\s+(.+?)\s+FROM', sql, re.IGNORECASE | re.DOTALL)
        if select_match:
            select_columns = select_match.group(1).lower()
            for keyword in pitcher_keywords:
                if keyword in select_columns:
                    pitcher_score += 3  # SELECT Ï†àÎèÑ Ï§ëÏöî
            for keyword in batter_keywords:
                if keyword in select_columns:
                    batter_score += 3  # SELECT Ï†àÎèÑ Ï§ëÏöî
        
        
        print(f"üîç Ìà¨Ïàò Ï†êÏàò: {pitcher_score}, ÌÉÄÏûê Ï†êÏàò: {batter_score}")
        
        if pitcher_score > batter_score:
            return "pitcher"
        elif batter_score > pitcher_score:
            return "batter"
        else:
            return "both"  # Íµ¨Î∂ÑÏù¥ Ïñ¥Î†§Ïö¥ Í≤ΩÏö∞
    
    def _extract_player_names_from_sql(self, sql: str) -> list:
        """SQLÏóêÏÑú ÏÑ†ÏàòÎ™Ö Ï∂îÏ∂ú"""
        import re
        
        # ÌåÄ ÏΩîÎìú Î™©Î°ù (ÏÑ†ÏàòÎ™ÖÏù¥ ÏïÑÎãå Í≤ÉÎì§)
        team_codes = {'HH', 'OB', 'HT', 'WO', 'LT', 'SS', 'SK', 'KT', 'NC', 'LG'}
        
        all_matches = []
        
        # 1. player_name IN ('ÏÑ†ÏàòÎ™Ö1', 'ÏÑ†ÏàòÎ™Ö2') Ìå®ÌÑ¥ Ï∞æÍ∏∞
        pattern1 = r"player_name\s+IN\s*\(\s*['\"]([^'\"]+)['\"]\s*,\s*['\"]([^'\"]+)['\"]\s*\)"
        matches1 = re.findall(pattern1, sql, re.IGNORECASE)
        for match in matches1:
            all_matches.extend(match)
        
        # 2. player_name = 'ÏÑ†ÏàòÎ™Ö' OR player_name = 'ÏÑ†ÏàòÎ™Ö' Ìå®ÌÑ¥ Ï∞æÍ∏∞
        pattern2 = r"player_name\s*=\s*['\"]([^'\"]+)['\"]"
        matches2 = re.findall(pattern2, sql, re.IGNORECASE)
        all_matches.extend(matches2)
        
        # 3. (p.player_name = 'ÏÑ†ÏàòÎ™Ö' OR p.player_name = 'ÏÑ†ÏàòÎ™Ö') Ìå®ÌÑ¥ Ï∞æÍ∏∞
        pattern3 = r"p\.player_name\s*=\s*['\"]([^'\"]+)['\"]"
        matches3 = re.findall(pattern3, sql, re.IGNORECASE)
        all_matches.extend(matches3)
        
        print(f"üîç SQL Ìå®ÌÑ¥ Îß§Ïπ≠ Í≤∞Í≥º: {all_matches}")
        
        # ÌåÄ ÏΩîÎìúÍ∞Ä ÏïÑÎãå Ïã§Ï†ú ÏÑ†ÏàòÎ™ÖÎßå ÌïÑÌÑ∞ÎßÅ
        player_names = [name for name in all_matches if name.upper() not in team_codes]
        
        # ÎßåÏïΩ WHERE Ï†àÏóêÏÑú ÏÑ†ÏàòÎ™ÖÏùÑ Ï∞æÏßÄ Î™ªÌñàÎã§Î©¥, Ïù¥Îäî ÌÜµÍ≥Ñ Ï°∞Ìöå ÏøºÎ¶¨Ïù¥ÎØÄÎ°ú Îπà Î¶¨Ïä§Ìä∏ Î∞òÌôò
        # (Ïòà: SELECT player_name, hr FROM ... WHERE team = 'ÌïúÌôî' ORDER BY hr DESC)
        if not player_names:
            print("üîç WHERE Ï†àÏóêÏÑú ÏÑ†ÏàòÎ™ÖÏùÑ Ï∞æÏßÄ Î™ªÌï® - ÌÜµÍ≥Ñ Ï°∞Ìöå ÏøºÎ¶¨Î°ú ÌåêÎã®")
        
        return player_names
    
    def _get_team_games_count(self) -> dict:
        """Í∞Å ÌåÄÏùò ÏµúÎåÄ Í≤ΩÍ∏∞ ÏàòÎ•º Í≥ÑÏÇ∞"""
        try:
            result = self.supabase.supabase.table("player_season_stats").select("team, gamenum").eq("gyear", "2025").execute()
            
            team_games = {}
            for player in result.data:
                team = player['team']
                gamenum = player['gamenum']
                if team not in team_games or gamenum > team_games[team]:
                    team_games[team] = gamenum
            
            return team_games
        except Exception as e:
            print(f"‚ùå ÌåÄ Í≤ΩÍ∏∞ Ïàò Ï°∞Ìöå Ïò§Î•ò: {e}")
            # Í∏∞Î≥∏Í∞í Î∞òÌôò
            return {"ÌïúÌôî": 128, "ÎëêÏÇ∞": 123, "LG": 128, "NC": 126, "SSG": 125, 
                   "KIA": 117, "KT": 116, "Î°ØÎç∞": 130, "ÏÇºÏÑ±": 129, "ÌÇ§ÏõÄ": 130}
    
    def _get_game_schedule_data(self, sql: str, question: str = "") -> list:
        """Í≤ΩÍ∏∞ ÏùºÏ†ï Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå"""
        try:
            from datetime import datetime, timedelta
            
            # game_schedule ÌÖåÏù¥Î∏îÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
            result = self.supabase.supabase.table("game_schedule").select("*").execute()
            
            if not result.data:
                return []
            
            # ÎÇ†Ïßú ÌïÑÌÑ∞ÎßÅ
            today = datetime.now()
            today_str = today.strftime("%Y-%m-%d")
            
            # ÏßàÎ¨∏Ïóê Îî∞Î•∏ ÎÇ†Ïßú ÌïÑÌÑ∞ÎßÅ
            if "Ïò§Îäò" in question or "today" in question.lower():
                filtered_games = [game for game in result.data if game.get('game_date') == today_str]
                print(f"üìÖ Ïò§Îäò({today_str}) Í≤ΩÍ∏∞ Ï°∞Ìöå: {len(filtered_games)}Í∞ú")
            elif "ÎÇ¥Ïùº" in question or "tomorrow" in question.lower():
                tomorrow = today + timedelta(days=1)
                tomorrow_str = tomorrow.strftime("%Y-%m-%d")
                filtered_games = [game for game in result.data if game.get('game_date') == tomorrow_str]
                print(f"üìÖ ÎÇ¥Ïùº({tomorrow_str}) Í≤ΩÍ∏∞ Ï°∞Ìöå: {len(filtered_games)}Í∞ú")
            else:
                # Í∏∞Î≥∏Ï†ÅÏúºÎ°ú ÏµúÍ∑º 7ÏùºÍ∞ÑÏùò Í≤ΩÍ∏∞Îßå Ï°∞Ìöå
                week_ago = today - timedelta(days=7)
                week_ago_str = week_ago.strftime("%Y-%m-%d")
                filtered_games = [
                    game for game in result.data 
                    if game.get('game_date', '') >= week_ago_str and game.get('game_date', '') <= today_str
                ]
                print(f"üìÖ ÏµúÍ∑º 7ÏùºÍ∞Ñ({week_ago_str} ~ {today_str}) Í≤ΩÍ∏∞ Ï°∞Ìöå: {len(filtered_games)}Í∞ú")
            
            # ÌäπÏ†ï ÌåÄ Í¥ÄÎ†® ÏßàÎ¨∏Ïù∏ÏßÄ ÌôïÏù∏
            team_mappings = {
                'ÌïúÌôî': 'HH', 'ÎëêÏÇ∞': 'OB', 'KIA': 'HT', 'ÌÇ§ÏõÄ': 'WO',
                'Î°ØÎç∞': 'LT', 'ÏÇºÏÑ±': 'SS', 'SSG': 'SK', 'KT': 'KT',
                'NC': 'NC', 'LG': 'LG'
            }
            
            # ÏßàÎ¨∏ÏóêÏÑú ÌåÄÎ™Ö Ï∂îÏ∂ú
            mentioned_team = None
            for team_name, team_code in team_mappings.items():
                if team_name in question or team_code.lower() in question.lower():
                    mentioned_team = team_code
                    break
            
            if mentioned_team:
                # Ìï¥Îãπ ÌåÄ Í≤ΩÍ∏∞Îßå ÌïÑÌÑ∞ÎßÅ
                team_games = [
                    game for game in filtered_games 
                    if game.get('home_team_code') == mentioned_team or game.get('away_team_code') == mentioned_team
                ]
                print(f"üìÖ {mentioned_team} ÌåÄ Í≤ΩÍ∏∞ Ï°∞Ìöå: {len(team_games)}Í∞ú")
                return team_games
            else:
                return filtered_games
            
        except Exception as e:
            print(f"‚ùå Í≤ΩÍ∏∞ ÏùºÏ†ï Ï°∞Ìöå Ïò§Î•ò: {e}")
            return []
    
    def _get_game_result_data(self, sql: str) -> list:
        """ÌåÄ ÏàúÏúÑ Î∞è ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå"""
        try:
            result = self.supabase.supabase.table("game_result").select("*").execute()
            
            if not result.data:
                return []
            
            print(f"üìä ÌåÄ ÏàúÏúÑ Î∞è ÌÜµÍ≥Ñ Ï°∞Ìöå: {len(result.data)}Í∞ú")
            return result.data
            
        except Exception as e:
            print(f"‚ùå ÌåÄ ÏàúÏúÑ Î∞è ÌÜµÍ≥Ñ Ï°∞Ìöå Ïò§Î•ò: {e}")
            return []
    
    def analyze_results(self, question: str, data: list) -> str:
        """Ï°∞Ìöå Í≤∞Í≥ºÎ•º Î∂ÑÏÑùÌï¥ÏÑú ÎãµÎ≥Ä ÏÉùÏÑ±"""
        try:
            print(f"üîç analyze_results Ìò∏Ï∂ú - Îç∞Ïù¥ÌÑ∞ Í∞úÏàò: {len(data) if data else 0}Í∞ú")
            
            # Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Í∞í Î°úÍ∑∏ Ï∂úÎ†•
            if data:
                print(f"üìä Ï°∞ÌöåÎêú Îç∞Ïù¥ÌÑ∞ ÎÇ¥Ïö©:")
                for i, item in enumerate(data[:3]):  # ÏµúÎåÄ 3Í∞úÎßå Ï∂úÎ†•
                    print(f"  [{i+1}] {item}")
                if len(data) > 3:
                    print(f"  ... Ïô∏ {len(data)-3}Í∞ú Îçî")
            
            if not data:
                print("‚ùå Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏñ¥ÏÑú ÏÉÅÌô©Î≥Ñ Ï†ÅÏ†àÌïú ÏùëÎãµ Î∞òÌôò")
                return self._get_no_data_message(question)
            
            # DB ÏóêÎü¨ Î©îÏãúÏßÄÍ∞Ä Ìè¨Ìï®Îêú Îç∞Ïù¥ÌÑ∞Ïù∏ÏßÄ ÌôïÏù∏
            if isinstance(data, list) and len(data) > 0:
                if isinstance(data[0], str) and data[0].startswith("DB_ERROR:"):
                    print("‚ùå DB ÏóêÎü¨ Í∞êÏßÄ - ÏóêÎü¨ Î©îÏãúÏßÄ Î∞òÌôò")
                    return data[0]
            
            # Í≤ΩÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏ Î∞è Î∂ÑÍ∏∞ Ï≤òÎ¶¨ (ÎèôÍ∏∞ Î≤ÑÏ†Ñ)
            game_status_info = self._check_game_status_from_data(data)
            
            # Í≤ΩÍ∏∞ ÏÉÅÌÉúÏóê Îî∞Î•∏ Îã§Î•∏ Ï≤òÎ¶¨ (Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉÅÌÉúÎßå ÏÇ¨Ïö©)
            if game_status_info['is_game_question']:
                if game_status_info['status'] == 'in_progress':
                    return self._generate_in_progress_game_answer(question, data, game_status_info)
                elif game_status_info['status'] == 'finished':
                    return self._generate_finished_game_answer(question, data, game_status_info)
                elif game_status_info['status'] == 'not_started':
                    return self._generate_not_started_game_answer(question, data, game_status_info)
            
            # Îç∞Ïù¥ÌÑ∞Î•º Ïª®ÌÖçÏä§Ìä∏Î°ú Î≥ÄÌôò
            context = json.dumps(data, ensure_ascii=False, indent=2)
            
            # Î∂ÑÏÑù ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
            prompt = f"""
ÎãπÏã†ÏùÄ KBO Ï†ÑÎ¨∏ Î∂ÑÏÑùÍ∞ÄÏûÖÎãàÎã§. Îã§Ïùå Îç∞Ïù¥ÌÑ∞Î•º Î∞îÌÉïÏúºÎ°ú ÏÇ¨Ïö©ÏûêÏùò ÏßàÎ¨∏Ïóê ÎãµÎ≥ÄÌï¥Ï£ºÏÑ∏Ïöî.

ÏßàÎ¨∏: {question}

Îç∞Ïù¥ÌÑ∞ (Ïù¥ÎØ∏ Ï†ïÎ†¨ÎêòÏñ¥ ÏûàÏùå):
{context}

ÎãµÎ≥Ä Í∑úÏπô:
1. Îç∞Ïù¥ÌÑ∞Î•º Í∏∞Î∞òÏúºÎ°ú Ï†ïÌôïÌïú ÎãµÎ≥ÄÏùÑ Ï†úÍ≥µÌïòÏÑ∏Ïöî
2. Íµ¨Ï≤¥Ï†ÅÏù∏ ÏàòÏπòÏôÄ ÏÑ†ÏàòÎ™ÖÏùÑ Ìè¨Ìï®ÌïòÏÑ∏Ïöî
3. Í∞ÑÍ≤∞ÌïòÍ≥† ÌïÑÏöîÌïú Ï†ïÎ≥¥Îßå Ï†úÍ≥µÌïòÏÑ∏Ïöî (Í≥ºÎèÑÌïú ÏÑ§Î™Ö Í∏àÏßÄ)
4. Ï§ÑÎ∞îÍøàÏùÑ ÌôúÏö©ÌïòÏó¨ ÏùΩÍ∏∞ ÏâΩÍ≤å ÏûëÏÑ±ÌïòÏÑ∏Ïöî
5. **ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï ÏÇ¨Ïö© Í∏àÏßÄ** (**, *, ~~, # Îì± ÏÇ¨Ïö©ÌïòÏßÄ ÎßàÏÑ∏Ïöî)
6. **Í≤ΩÍ∏∞ ÏòàÏ∏° ÏßàÎ¨∏Ïùò Í≤ΩÏö∞**: ÌåÄÎ≥Ñ ÏµúÍ∑º ÏÑ±Ï†ÅÍ≥º ÏÉÅÎåÄ Ï†ÑÏ†ÅÏùÑ Î∞îÌÉïÏúºÎ°ú Íµ¨Ï≤¥Ï†ÅÏù∏ ÏòàÏ∏°ÏùÑ Ï†úÍ≥µÌïòÏÑ∏Ïöî
7. **ÌôàÍµ¨Ïû• Ï†ïÎ≥¥**: Î°ØÎç∞Îäî ÏÇ¨ÏßÅ, ÌïúÌôîÎäî ÎåÄÏ†Ñ, ÏÇºÏÑ±ÏùÄ ÎåÄÍµ¨, SSGÎäî Î¨∏Ìïô, KTÎäî ÏàòÏõê, NCÎäî Ï∞ΩÏõê, KIAÎäî Í¥ëÏ£º, ÌÇ§ÏõÄÏùÄ Í≥†Ï≤ô, ÎëêÏÇ∞/LGÎäî Ïû†Ïã§
8. ‚ö†Ô∏è Ï§ëÏöî: Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú Ï°∞ÌöåÎêú Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îßå ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî
9. ‚ö†Ô∏è CRITICAL: Îç∞Ïù¥ÌÑ∞Îäî Ïù¥ÎØ∏ Ï†ïÎ†¨ÎêòÏñ¥ ÏûàÏäµÎãàÎã§. Ï†àÎåÄÎ°ú ÏàúÏÑúÎ•º Î∞îÍæ∏ÏßÄ ÎßàÏÑ∏Ïöî!
10. ‚ö†Ô∏è ÏàúÏúÑ ÏßàÎ¨∏Ïùò Í≤ΩÏö∞: Îç∞Ïù¥ÌÑ∞Ïùò ÏàúÏÑúÎ•º Í∑∏ÎåÄÎ°ú Îî∞ÎùºÍ∞ÄÏÑ∏Ïöî (1Î≤àÏß∏ Îç∞Ïù¥ÌÑ∞ = 1ÏúÑ, 2Î≤àÏß∏ Îç∞Ïù¥ÌÑ∞ = 2ÏúÑ...)
11. ‚ö†Ô∏è ÌÉÄÏú®/ÌôàÎü∞ Îì± ÌÜµÍ≥Ñ ÏßàÎ¨∏Ïùò Í≤ΩÏö∞: Îç∞Ïù¥ÌÑ∞Ïùò ÏàúÏÑúÎ•º Ï†ïÌôïÌûà Ïú†ÏßÄÌïòÏó¨ ÎãµÎ≥ÄÌïòÏÑ∏Ïöî

ÎãµÎ≥Ä:"""
            
            response = self.llm.invoke(prompt)
            return response.content
            
        except Exception as e:
            print(f"‚ùå Í≤∞Í≥º Î∂ÑÏÑù Ïò§Î•ò: {e}")
            return "DB_ERROR: Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
    
    def _check_game_status_from_data(self, data: list) -> dict:
        """Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Í≤ΩÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏"""
        try:
            if not data or not isinstance(data, list) or len(data) == 0:
                return {'is_game_question': False, 'status': 'unknown'}
            
            # Ï≤´ Î≤àÏß∏ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏ (Î≥¥ÌÜµ Í∞ÄÏû• ÏµúÍ∑º Í≤ΩÍ∏∞)
            first_game = data[0]
            
            # Í≤ΩÍ∏∞ Í¥ÄÎ†® ÏßàÎ¨∏Ïù∏ÏßÄ ÌôïÏù∏ (status_codeÎÇò game_idÍ∞Ä ÏûàÎäîÏßÄ)
            is_game_question = (
                'status_code' in first_game or 
                'game_id' in first_game or
                'game_date' in first_game or
                'home_team' in first_game or
                'away_team' in first_game
            )
            
            if not is_game_question:
                return {'is_game_question': False, 'status': 'unknown'}
            
            # ÏÉÅÌÉú ÏΩîÎìú ÌôïÏù∏
            status_code = first_game.get('status_code', '')
            status_info = first_game.get('status_info', '')
            
            print(f"üîç Í≤ΩÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏: status_code={status_code}, status_info={status_info}")
            
            # ÏÉÅÌÉú Î∂ÑÎ•ò
            if status_code == 'RESULT' or status_code == '4' or status_code == '3':
                # Í≤ΩÍ∏∞ Ï¢ÖÎ£å (9ÌöåÎßê, 9ÌöåÏ¥à Îì±)
                if '9Ìöå' in status_info or status_info == '':
                    return {'is_game_question': True, 'status': 'finished', 'game_data': first_game}
                else:
                    return {'is_game_question': True, 'status': 'finished', 'game_data': first_game}
            
            elif status_code == 'LIVE' or status_code == '2':
                # Í≤ΩÍ∏∞ ÏßÑÌñâÏ§ë
                return {'is_game_question': True, 'status': 'in_progress', 'game_data': first_game}
            
            elif status_code == 'BEFORE' or status_code == '0' or status_code == '1':
                # Í≤ΩÍ∏∞ ÏãúÏûë Ï†Ñ
                return {'is_game_question': True, 'status': 'not_started', 'game_data': first_game}
            
            else:
                # ÏÉÅÌÉú Î∂àÎ™Ö
                return {'is_game_question': True, 'status': 'unknown', 'game_data': first_game}
                
        except Exception as e:
            print(f"‚ùå Í≤ΩÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏ Ïò§Î•ò: {e}")
            return {'is_game_question': False, 'status': 'unknown'}
    
    def _is_current_game_question(self, question: str) -> bool:
        """ÌòÑÏû¨ ÏßÑÌñâÏ§ëÏù∏ Í≤ΩÍ∏∞Ïóê ÎåÄÌïú ÏßàÎ¨∏Ïù∏ÏßÄ ÌåêÎã®"""
        current_keywords = [
            'ÏßÄÍ∏à', 'ÌòÑÏû¨', 'ÏßÄÍ∏àÏùÄ', 'ÌòÑÏû¨Îäî', 'ÏßÄÍ∏à Î™áÌöå', 'ÌòÑÏû¨ Î™áÌöå',
            'ÏßÄÍ∏à Ï†êÏàò', 'ÌòÑÏû¨ Ï†êÏàò', 'ÏßÄÍ∏à ÏÉÅÌô©', 'ÌòÑÏû¨ ÏÉÅÌô©',
            'ÏßÄÍ∏à Ïñ¥ÎñªÍ≤å', 'ÌòÑÏû¨ Ïñ¥ÎñªÍ≤å', 'ÏßÄÍ∏à Ïñ¥Îïå', 'ÌòÑÏû¨ Ïñ¥Îïå'
        ]
        
        question_lower = question.lower()
        return any(keyword in question_lower for keyword in current_keywords)
    
    def _generate_in_progress_game_answer(self, question: str, data: list, status_info: dict) -> str:
        """ÏßÑÌñâÏ§ëÏù∏ Í≤ΩÍ∏∞Ïóê ÎåÄÌïú ÎãµÎ≥Ä ÏÉùÏÑ±"""
        try:
            game_data = status_info.get('game_data', {})
            question_lower = question.lower()
            
            # Í∏∞Î≥∏ Í≤ΩÍ∏∞ Ï†ïÎ≥¥
            home_team = game_data.get('home_team_name', game_data.get('home_team', ''))
            away_team = game_data.get('away_team_name', game_data.get('away_team', ''))
            stadium = game_data.get('stadium', '')
            game_date = game_data.get('game_date', '')
            status_info_text = game_data.get('status_info', '')
            
            # API Îç∞Ïù¥ÌÑ∞ÏóêÏÑú ÌòÑÏû¨ Ïù¥ÎãùÍ≥º Ï†êÏàò Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
            current_inning = status_info.get('current_inning', status_info_text)
            current_score = status_info.get('current_score', {})
            
            # ÏßÑÌñâÏ§ëÏù∏ Í≤ΩÍ∏∞ÏûÑÏùÑ Î™ÖÏãú
            answer = f"üî¥ ÌòÑÏû¨ ÏßÑÌñâÏ§ëÏù∏ Í≤ΩÍ∏∞ÏûÖÎãàÎã§!\n"
            answer += f"üèüÔ∏è {away_team} vs {home_team} ({stadium})\n"
            
            # ÌòÑÏû¨ Ïù¥Îãù Ï†ïÎ≥¥
            if current_inning:
                answer += f"‚öæ ÌòÑÏû¨ ÏÉÅÌô©: {current_inning}\n"
            elif status_info_text:
                answer += f"‚öæ ÌòÑÏû¨ ÏÉÅÌô©: {status_info_text}\n"
            
            # ÌòÑÏû¨ Ï†êÏàò Ï†ïÎ≥¥
            if current_score:
                # APIÏóêÏÑú Î∞õÏùÄ Ï†êÏàò Ï†ïÎ≥¥ Ï≤òÎ¶¨ (hScore: ÌôàÌåÄ, aScore: ÏõêÏ†ïÌåÄ)
                home_score = current_score.get('hScore', current_score.get('home', game_data.get('home_team_score', '0')))
                away_score = current_score.get('aScore', current_score.get('away', game_data.get('away_team_score', '0')))
                answer += f"üìä ÌòÑÏû¨ Ï†êÏàò: {away_team} {away_score} - {home_score} {home_team}\n"
            else:
                home_score = game_data.get('home_team_score', '0')
                away_score = game_data.get('away_team_score', '0')
                answer += f"üìä ÌòÑÏû¨ Ï†êÏàò: {away_team} {away_score} - {home_score} {home_team}\n"
            
            # ÏßàÎ¨∏ Ïú†ÌòïÎ≥Ñ ÎãµÎ≥Ä
            if any(keyword in question_lower for keyword in ['ÏÑ†Î∞ú', 'Ìà¨Ïàò']):
                home_starter = game_data.get('home_starter_name', '')
                away_starter = game_data.get('away_starter_name', '')
                
                if home_starter and away_starter:
                    answer += f"üéØ ÏÑ†Î∞ú Ìà¨Ïàò: {away_team} {away_starter} vs {home_team} {home_starter}\n"
                else:
                    answer += f"üéØ ÏÑ†Î∞ú Ìà¨Ïàò Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§.\n"
            
            elif any(keyword in question_lower for keyword in ['Î™áÌöå', 'Î™á Ìöå', 'Ïù¥Îãù']):
                if current_inning:
                    answer += f"‚öæ ÌòÑÏû¨ {current_inning}ÏûÖÎãàÎã§.\n"
                else:
                    answer += f"‚öæ ÌòÑÏû¨ Ïù¥Îãù Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§.\n"
            
            elif any(keyword in question_lower for keyword in ['Ïñ¥ÎñªÍ≤å', 'ÏÉÅÌô©', 'ÌòÑÌô©']):
                answer += f"üìà Í≤ΩÍ∏∞Í∞Ä ÌòÑÏû¨ ÏßÑÌñâÏ§ëÏù¥ÎØÄÎ°ú Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÏÉÅÌô©Ïù¥ Î≥ÄÌï† Ïàò ÏûàÏäµÎãàÎã§.\n"
            
            return answer
            
        except Exception as e:
            print(f"‚ùå ÏßÑÌñâÏ§ë Í≤ΩÍ∏∞ ÎãµÎ≥Ä ÏÉùÏÑ± Ïò§Î•ò: {e}")
            return "ÌòÑÏû¨ ÏßÑÌñâÏ§ëÏù∏ Í≤ΩÍ∏∞ Ï†ïÎ≥¥Î•º Ï≤òÎ¶¨ÌïòÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
    
    def _generate_finished_game_answer(self, question: str, data: list, status_info: dict) -> str:
        """Ï¢ÖÎ£åÎêú Í≤ΩÍ∏∞Ïóê ÎåÄÌïú ÎãµÎ≥Ä ÏÉùÏÑ±"""
        try:
            game_data = status_info.get('game_data', {})
            
            # Í∏∞Î≥∏ Í≤ΩÍ∏∞ Ï†ïÎ≥¥
            home_team = game_data.get('home_team_name', game_data.get('home_team', ''))
            away_team = game_data.get('away_team_name', game_data.get('away_team', ''))
            stadium = game_data.get('stadium', '')
            game_date = game_data.get('game_date', '')
            home_score = game_data.get('home_team_score', '0')
            away_score = game_data.get('away_team_score', '0')
            winner = game_data.get('winner', '')
            
            # Í≤ΩÍ∏∞ Í≤∞Í≥º ÏöîÏïΩ
            if winner == 'HOME':
                result_text = f"{home_team} {home_score} - {away_score} {away_team}Î°ú ÏäπÎ¶¨"
            elif winner == 'AWAY':
                result_text = f"{away_team} {away_score} - {home_score} {home_team}Î°ú ÏäπÎ¶¨"
            else:
                result_text = f"{away_team} {away_score} - {home_score} {home_team}"
            
            # ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ
            if game_date and len(game_date) == 8:
                formatted_date = f"{game_date[:4]}ÎÖÑ {game_date[4:6]}Ïõî {game_date[6:8]}Ïùº"
            else:
                formatted_date = game_date
            
            answer = f"üìÖ {formatted_date} {stadium}ÏóêÏÑú Ïó¥Î¶∞ Í≤ΩÍ∏∞ Í≤∞Í≥ºÏûÖÎãàÎã§.\n"
            answer += f"üèÜ {result_text}ÌñàÏäµÎãàÎã§.\n"
            
            # ÏßàÎ¨∏ Ïú†ÌòïÎ≥Ñ Ï∂îÍ∞Ä Ï†ïÎ≥¥
            question_lower = question.lower()
            if any(keyword in question_lower for keyword in ['ÏÑ†Î∞ú', 'Ìà¨Ïàò']):
                home_starter = game_data.get('home_starter_name', '')
                away_starter = game_data.get('away_starter_name', '')
                win_pitcher = game_data.get('win_pitcher_name', '')
                lose_pitcher = game_data.get('lose_pitcher_name', '')
                
                if home_starter and away_starter:
                    answer += f"üéØ ÏÑ†Î∞ú Ìà¨Ïàò: {away_team} {away_starter} vs {home_team} {home_starter}\n"
                
                if win_pitcher and lose_pitcher:
                    answer += f"üèÖ ÏäπÎ¶¨ Ìà¨Ïàò: {win_pitcher}, Ìå®Ï†Ñ Ìà¨Ïàò: {lose_pitcher}\n"
            
            return answer
            
        except Exception as e:
            print(f"‚ùå Ï¢ÖÎ£åÎêú Í≤ΩÍ∏∞ ÎãµÎ≥Ä ÏÉùÏÑ± Ïò§Î•ò: {e}")
            return "Í≤ΩÍ∏∞ Í≤∞Í≥º Ï†ïÎ≥¥Î•º Ï≤òÎ¶¨ÌïòÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
    
    def _generate_not_started_game_answer(self, question: str, data: list, status_info: dict) -> str:
        """ÏãúÏûë Ï†Ñ Í≤ΩÍ∏∞Ïóê ÎåÄÌïú ÎãµÎ≥Ä ÏÉùÏÑ±"""
        try:
            game_data = status_info.get('game_data', {})
            
            # Í∏∞Î≥∏ Í≤ΩÍ∏∞ Ï†ïÎ≥¥
            home_team = game_data.get('home_team_name', game_data.get('home_team', ''))
            away_team = game_data.get('away_team_name', game_data.get('away_team', ''))
            stadium = game_data.get('stadium', '')
            game_date = game_data.get('game_date', '')
            game_time = game_data.get('game_date_time', '')
            
            # ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ
            if game_date and len(game_date) == 8:
                formatted_date = f"{game_date[:4]}ÎÖÑ {game_date[4:6]}Ïõî {game_date[6:8]}Ïùº"
            else:
                formatted_date = game_date
            
            # ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ
            if game_time and len(game_time) >= 16:
                time_part = game_time[11:16]
            else:
                time_part = "ÏãúÍ∞Ñ ÎØ∏Ï†ï"
            
            answer = f"‚è∞ ÏïÑÏßÅ ÏãúÏûëÌïòÏßÄ ÏïäÏùÄ Í≤ΩÍ∏∞ÏûÖÎãàÎã§.\n"
            answer += f"üèüÔ∏è {away_team} vs {home_team} ({stadium})\n"
            answer += f"üìÖ {formatted_date} {time_part} ÏòàÏ†ï\n"
            
            # ÏßàÎ¨∏ Ïú†ÌòïÎ≥Ñ ÎãµÎ≥Ä
            question_lower = question.lower()
            if any(keyword in question_lower for keyword in ['ÏÑ†Î∞ú', 'Ìà¨Ïàò']):
                home_starter = game_data.get('home_starter_name', '')
                away_starter = game_data.get('away_starter_name', '')
                
                if home_starter and away_starter:
                    answer += f"üéØ ÏòàÏ†ï ÏÑ†Î∞ú Ìà¨Ïàò: {away_team} {away_starter} vs {home_team} {home_starter}\n"
                else:
                    answer += f"üéØ ÏÑ†Î∞ú Ìà¨Ïàò Ï†ïÎ≥¥Îäî Í≤ΩÍ∏∞ ÏãúÏûë Ï†ÑÏóê Í≥µÍ∞úÎê©ÎãàÎã§.\n"
            
            return answer
            
        except Exception as e:
            print(f"‚ùå ÏãúÏûë Ï†Ñ Í≤ΩÍ∏∞ ÎãµÎ≥Ä ÏÉùÏÑ± Ïò§Î•ò: {e}")
            return "ÏòàÏ†ïÎêú Í≤ΩÍ∏∞ Ï†ïÎ≥¥Î•º Ï≤òÎ¶¨ÌïòÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
    
    async def _check_live_game_status_from_api(self, game_data: dict) -> dict:
        """API Ìò∏Ï∂úÏùÑ ÌÜµÌï¥ Ïã§Ï†ú Í≤ΩÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏"""
        try:
            game_id = game_data.get('game_id')
            if not game_id:
                return {'status': 'unknown', 'game_data': game_data}
            
            print(f"üîç API Ìò∏Ï∂úÎ°ú Í≤ΩÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏: {game_id}")
            
            # game_record_serviceÎ•º ÌÜµÌï¥ Ïã§Ï†ú API Ìò∏Ï∂ú
            from data.game_record_service import GameRecordService
            game_record_service = GameRecordService()
            
            record_data = await game_record_service.get_game_record(game_id)
            
            if not record_data:
                print(f"‚ùå API ÏùëÎãµ ÏóÜÏùå: {game_id}")
                return {'status': 'unknown', 'game_data': game_data}
            
            # API ÏùëÎãµÏóêÏÑú Í≤ΩÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏
            game_status = self._parse_api_game_status(record_data)
            print(f"üîç API ÏÉÅÌÉú ÌôïÏù∏ Í≤∞Í≥º: {game_status}")
            
            return {
                'status': game_status['status'],
                'game_data': game_data,
                'api_data': record_data,
                'current_inning': game_status.get('current_inning', ''),
                'current_score': game_status.get('current_score', {}),
                'status_info': game_status.get('status_info', '')
            }
            
        except Exception as e:
            print(f"‚ùå API Í≤ΩÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏ Ïò§Î•ò: {e}")
            return {'status': 'unknown', 'game_data': game_data}
    
    def _parse_api_game_status(self, record_data: dict) -> dict:
        """API ÏùëÎãµÏóêÏÑú Í≤ΩÍ∏∞ ÏÉÅÌÉú ÌååÏã±"""
        try:
            # result.recordData.games Íµ¨Ï°∞ÏóêÏÑú Ï∞æÍ∏∞
            if ('result' in record_data and 'recordData' in record_data['result'] and 
                'games' in record_data['result']['recordData'] and 
                len(record_data['result']['recordData']['games']) > 0):
                
                game_info = record_data['result']['recordData']['games'][0]
                
                # ÏÉÅÌÉú ÏΩîÎìú ÌôïÏù∏
                status_code = game_info.get('statusCode', '')
                current_inning = game_info.get('inn', '')
                score_info = game_info.get('score', {})
                
                print(f"üîç API ÏÉÅÌÉú Ï†ïÎ≥¥: statusCode={status_code}, inn={current_inning}")
                
                # ÏÉÅÌÉú Î∂ÑÎ•ò
                if str(status_code) == '2':  # ÏßÑÌñâÏ§ë
                    return {
                        'status': 'in_progress',
                        'current_inning': current_inning,
                        'current_score': score_info,
                        'status_info': current_inning
                    }
                elif str(status_code) in ['3', '4']:  # Ï¢ÖÎ£å
                    return {
                        'status': 'finished',
                        'current_inning': current_inning,
                        'current_score': score_info,
                        'status_info': current_inning
                    }
                elif str(status_code) in ['0', '1']:  # Í≤ΩÍ∏∞ Ï†Ñ
                    return {
                        'status': 'not_started',
                        'current_inning': '',
                        'current_score': {},
                        'status_info': 'Í≤ΩÍ∏∞ ÏòàÏ†ï'
                    }
                else:
                    return {
                        'status': 'unknown',
                        'current_inning': current_inning,
                        'current_score': score_info,
                        'status_info': current_inning
                    }
            else:
                # recordDataÍ∞Ä nullÏù∏ Í≤ΩÏö∞ (Í≤ΩÍ∏∞ ÏãúÏûë Ï†Ñ)
                if ('result' in record_data and 
                    'recordData' in record_data['result'] and 
                    record_data['result']['recordData'] is None):
                    return {
                        'status': 'not_started',
                        'current_inning': '',
                        'current_score': {},
                        'status_info': 'Í≤ΩÍ∏∞ ÏòàÏ†ï'
                    }
                else:
                    return {
                        'status': 'unknown',
                        'current_inning': '',
                        'current_score': {},
                        'status_info': 'ÏÉÅÌÉú Î∂àÎ™Ö'
                    }
                    
        except Exception as e:
            print(f"‚ùå API ÏÉÅÌÉú ÌååÏã± Ïò§Î•ò: {e}")
            return {
                'status': 'unknown',
                'current_inning': '',
                'current_score': {},
                'status_info': 'ÌååÏã± Ïò§Î•ò'
            }
    
    def _get_no_data_message(self, question: str) -> str:
        """ÏßàÎ¨∏ Ïú†ÌòïÏóê Îî∞Î•∏ Ï†ÅÏ†àÌïú 'Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå' Î©îÏãúÏßÄ Î∞òÌôò"""
        question_lower = question.lower()
        
        # Í≤ΩÍ∏∞ ÏùºÏ†ï Í¥ÄÎ†® ÏßàÎ¨∏
        if any(keyword in question for keyword in ['Í≤ΩÍ∏∞', 'ÏùºÏ†ï', 'Ïä§ÏºÄÏ§Ñ', 'Ïò§Îäò', 'ÎÇ¥Ïùº', 'Ïñ¥Ï†ú']):
            if 'Ïò§Îäò' in question:
                return "Ïò§ÎäòÏùÄ Í≤ΩÍ∏∞Í∞Ä ÏóÜÏäµÎãàÎã§. Îã§Î•∏ ÎÇ†ÏßúÏùò Í≤ΩÍ∏∞Î•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî! üòä"
            elif 'ÎÇ¥Ïùº' in question:
                return "ÎÇ¥ÏùºÏùÄ Í≤ΩÍ∏∞Í∞Ä ÏóÜÏäµÎãàÎã§. Îã§Î•∏ ÎÇ†ÏßúÏùò Í≤ΩÍ∏∞Î•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî! üòä"
            else:
                return "Ìï¥Îãπ ÎÇ†ÏßúÏóêÎäî Í≤ΩÍ∏∞ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§. Îã§Î•∏ ÎÇ†ÏßúÎ•º Ï°∞ÌöåÌï¥Ï£ºÏÑ∏Ïöî! üòä"
        
        # ÏÑ†Ïàò Í¥ÄÎ†® ÏßàÎ¨∏
        elif any(keyword in question for keyword in ['ÏÑ†Ïàò', 'ÏÑ†Î∞ú', 'ÌÉÄÏûê', 'Ìà¨Ïàò', 'ÏÑ±Ï†Å', 'Í∏∞Î°ù', 'ÌÜµÍ≥Ñ']):
            # ÏÑ†ÏàòÎ™ÖÏù¥ Ìè¨Ìï®Îêú ÏßàÎ¨∏Ïù∏ÏßÄ ÌôïÏù∏
            import re
            player_name_pattern = r'[Í∞Ä-Ìû£]{2,4}(?= ÏÑ†Ïàò|Ïùò|Ïù¥|Í∞Ä|ÏùÄ|Îäî)'
            player_matches = re.findall(player_name_pattern, question)
            
            if player_matches:
                player_name = player_matches[0]
                return f"'{player_name}' ÏÑ†Ïàò Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. ÏÑ†Ïàò Ïù¥Î¶ÑÏùÑ Îã§Ïãú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî! üòä"
            else:
                return "Ìï¥Îãπ Ï°∞Í±¥Ïóê ÎßûÎäî ÏÑ†Ïàò Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§. Îã§Î•∏ Ï°∞Í±¥ÏúºÎ°ú Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî! üòä"
        
        # ÌåÄ ÏàúÏúÑ/ÌÜµÍ≥Ñ Í¥ÄÎ†® ÏßàÎ¨∏
        elif any(keyword in question for keyword in ['ÏàúÏúÑ', 'Îì±Ïàò', 'Ïö∞Ïäπ', 'Ìè¨Ïä§Ìä∏ÏãúÏ¶å', 'ÌîåÎ†àÏù¥Ïò§ÌîÑ']):
            return "Ìï¥Îãπ Ï°∞Í±¥Ïùò ÌåÄ ÏàúÏúÑ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Îã§Î•∏ Ï°∞Í±¥ÏúºÎ°ú Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî! üòä"
        
        # ÏùºÎ∞òÏ†ÅÏù∏ Í≤ΩÏö∞
        else:
            return "Ìï¥Îãπ ÏßàÎ¨∏Ïóê ÎåÄÌïú Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Îã§Î•∏ ÏßàÎ¨∏ÏùÑ ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî! üòä"
    
    async def process_question(self, question: str) -> str:
        """ÏßàÎ¨∏ÏùÑ RAG Í∏∞Î∞ò Text-to-SQLÎ°ú Ï≤òÎ¶¨"""
        try:
            print(f"üîç RAG Í∏∞Î∞ò Text-to-SQL Ï≤òÎ¶¨ ÏãúÏûë: {question}")
            
            # ÌòÑÏû¨ ÏßÑÌñâÏ§ëÏù∏ Í≤ΩÍ∏∞ ÏßàÎ¨∏Ïù∏ÏßÄ ÌôïÏù∏
            if self._is_current_game_question(question):
                print(f"üîç ÌòÑÏû¨ ÏßÑÌñâÏ§ëÏù∏ Í≤ΩÍ∏∞ ÏßàÎ¨∏ Í∞êÏßÄ: {question}")
                import asyncio
                import threading
                
                def run_in_thread():
                    # ÏÉàÎ°úÏö¥ Ïä§Î†àÎìúÏóêÏÑú ÏÉàÎ°úÏö¥ Ïù¥Î≤§Ìä∏ Î£®ÌîÑ Ïã§Ìñâ
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    try:
                        return loop.run_until_complete(self._handle_current_game_question(question))
                    finally:
                        loop.close()
                
                try:
                    # Ïä§Î†àÎìúÏóêÏÑú ÎπÑÎèôÍ∏∞ Ìï®Ïàò Ïã§Ìñâ
                    result = [None]
                    thread = threading.Thread(target=lambda: result.__setitem__(0, run_in_thread()))
                    thread.start()
                    thread.join()
                    return result[0] if result[0] else "ÌòÑÏû¨ Í≤ΩÍ∏∞ Ï†ïÎ≥¥ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
                except Exception as e:
                    print(f"‚ùå ÎπÑÎèôÍ∏∞ Ï≤òÎ¶¨ Ïò§Î•ò: {e}")
                    return "ÌòÑÏû¨ Í≤ΩÍ∏∞ Ï†ïÎ≥¥ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
            
            # ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ ÏùºÏ†ï ÏßàÎ¨∏Ïù∏ÏßÄ ÌôïÏù∏
            elif self._is_daily_schedule_question(question):
                print(f"üîç ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ ÏùºÏ†ï ÏßàÎ¨∏ Í∞êÏßÄ: {question}")
                import asyncio
                import threading
                
                def run_in_thread():
                    # ÏÉàÎ°úÏö¥ Ïä§Î†àÎìúÏóêÏÑú ÏÉàÎ°úÏö¥ Ïù¥Î≤§Ìä∏ Î£®ÌîÑ Ïã§Ìñâ
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    try:
                        return loop.run_until_complete(self._handle_daily_schedule_question(question))
                    finally:
                        loop.close()
                
                try:
                    # Ïä§Î†àÎìúÏóêÏÑú ÎπÑÎèôÍ∏∞ Ìï®Ïàò Ïã§Ìñâ
                    result = [None]
                    thread = threading.Thread(target=lambda: result.__setitem__(0, run_in_thread()))
                    thread.start()
                    thread.join()
                    return result[0] if result[0] else "ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ ÏùºÏ†ï Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
                except Exception as e:
                    print(f"‚ùå ÎπÑÎèôÍ∏∞ Ï≤òÎ¶¨ Ïò§Î•ò: {e}")
                    return "ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ ÏùºÏ†ï Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
            
            # ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ Í≤∞Í≥º ÏßàÎ¨∏Ïù∏ÏßÄ ÌôïÏù∏
            elif self._is_daily_games_question(question):
                print(f"üîç ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ Í≤∞Í≥º ÏßàÎ¨∏ Í∞êÏßÄ: {question}")
                import asyncio
                import threading
                
                def run_in_thread():
                    # ÏÉàÎ°úÏö¥ Ïä§Î†àÎìúÏóêÏÑú ÏÉàÎ°úÏö¥ Ïù¥Î≤§Ìä∏ Î£®ÌîÑ Ïã§Ìñâ
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    try:
                        return loop.run_until_complete(self._handle_daily_games_analysis(question))
                    finally:
                        loop.close()
                
                try:
                    # Ïä§Î†àÎìúÏóêÏÑú ÎπÑÎèôÍ∏∞ Ìï®Ïàò Ïã§Ìñâ
                    result = [None]
                    thread = threading.Thread(target=lambda: result.__setitem__(0, run_in_thread()))
                    thread.start()
                    thread.join()
                    return result[0] if result[0] else "ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ Î∂ÑÏÑù Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
                except Exception as e:
                    print(f"‚ùå ÎπÑÎèôÍ∏∞ Ï≤òÎ¶¨ Ïò§Î•ò: {e}")
                    return "ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ Î∂ÑÏÑù Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
            
            # Í≤ΩÍ∏∞ Î∂ÑÏÑù ÏßàÎ¨∏Ïù∏ÏßÄ ÌôïÏù∏
            elif self._is_game_analysis_question(question):
                print(f"üîç Í≤ΩÍ∏∞ Î∂ÑÏÑù ÏßàÎ¨∏ Í∞êÏßÄ: {question}")
                import asyncio
                import threading
                
                def run_in_thread():
                    # ÏÉàÎ°úÏö¥ Ïä§Î†àÎìúÏóêÏÑú ÏÉàÎ°úÏö¥ Ïù¥Î≤§Ìä∏ Î£®ÌîÑ Ïã§Ìñâ
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    try:
                        return loop.run_until_complete(self._handle_game_analysis_question(question))
                    finally:
                        loop.close()
                
                try:
                    # Ïä§Î†àÎìúÏóêÏÑú ÎπÑÎèôÍ∏∞ Ìï®Ïàò Ïã§Ìñâ
                    result = [None]
                    thread = threading.Thread(target=lambda: result.__setitem__(0, run_in_thread()))
                    thread.start()
                    thread.join()
                    return result[0] if result[0] else "Í≤ΩÍ∏∞ Î∂ÑÏÑù Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
                except Exception as e:
                    print(f"‚ùå ÎπÑÎèôÍ∏∞ Ï≤òÎ¶¨ Ïò§Î•ò: {e}")
                    return "Í≤ΩÍ∏∞ Î∂ÑÏÑù Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
            
            # SQL ÏÉùÏÑ±
            sql = self.generate_sql(question)
            if not sql:
                return "SQL ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§."
            
            # SQL Ïã§Ìñâ
            data = self.execute_sql(sql, question)
            
            # Í≤∞Í≥º Î∂ÑÏÑù
            answer = self.analyze_results(question, data)
            
            print(f"‚úÖ RAG Í∏∞Î∞ò Text-to-SQL Ï≤òÎ¶¨ ÏôÑÎ£å")
            return answer
            
        except Exception as e:
            print(f"‚ùå RAG Í∏∞Î∞ò Text-to-SQL Ï≤òÎ¶¨ Ïò§Î•ò: {e}")
            return f"Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}"
    
    def _is_game_analysis_question(self, question: str) -> bool:
        """Í≤ΩÍ∏∞ Î∂ÑÏÑù ÏßàÎ¨∏Ïù∏ÏßÄ ÌåêÎã® (RAG Í∏∞Î∞ò)"""
        try:
            # Ïä§ÌÇ§Îßà Îß§ÎãàÏ†ÄÎ•º ÌÜµÌï¥ Í¥ÄÎ†® Ï†ïÎ≥¥ Í≤ÄÏÉâ
            relevant_schema = self.schema_manager.get_relevant_schema(question, top_k=3)
            
            # ÏßàÎ¨∏ Ïú†Ìòï ÌôïÏù∏
            question_types = relevant_schema.get("question_types", [])
            
            # Í≤ΩÍ∏∞ Î∂ÑÏÑù Í¥ÄÎ†® ÏßàÎ¨∏ Ïú†ÌòïÎì§
            game_analysis_types = [
                "game_analysis", "game_review", "game_summary", 
                "game_result", "game_detail", "game_record"
            ]
            
            # ÏßàÎ¨∏ Ïú†ÌòïÏóêÏÑú Í≤ΩÍ∏∞ Î∂ÑÏÑù Í¥ÄÎ†® ÌÇ§ÏõåÎìú ÌôïÏù∏
            for qtype_info in question_types:
                content = qtype_info.get("content", "").lower()
                if any(keyword in content for keyword in ["Í≤ΩÍ∏∞", "game", "Í≤∞Í≥º", "Î∂ÑÏÑù", "ÏöîÏïΩ", "Î¶¨Î∑∞"]):
                    # ÎÇ†Ïßú Ï†ïÎ≥¥ÎèÑ Ìï®Íªò ÏûàÎäîÏßÄ ÌôïÏù∏
                    if self._has_date_reference(question):
                        return True
            
            # ÏßÅÏ†ëÏ†ÅÏù∏ Í≤ΩÍ∏∞ Î∂ÑÏÑù ÌÇ§ÏõåÎìú ÌôïÏù∏ (ÏµúÏÜåÌïúÏùò ÌÇ§ÏõåÎìú)
            question_lower = question.lower()
            direct_keywords = ["Í≤ΩÍ∏∞ Î∂ÑÏÑù", "Í≤ΩÍ∏∞ Í≤∞Í≥º", "Í≤ΩÍ∏∞ ÏöîÏïΩ", "Í≤ΩÍ∏∞ Î¶¨Î∑∞"]
            
            if any(keyword in question_lower for keyword in direct_keywords):
                return True
            
            # ÎÇ†Ïßú + Í≤ΩÍ∏∞ Í¥ÄÎ†® ÏßàÎ¨∏Ïù∏ÏßÄ ÌôïÏù∏
            if self._has_date_reference(question) and self._has_game_reference(question):
                return True
                
            return False
            
        except Exception as e:
            print(f"‚ùå Í≤ΩÍ∏∞ Î∂ÑÏÑù ÏßàÎ¨∏ ÌåêÎã® Ïò§Î•ò: {e}")
            return False
    
    def _has_date_reference(self, question: str) -> bool:
        """ÎÇ†Ïßú Ï∞∏Ï°∞Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏"""
        # Íµ¨Ï≤¥Ï†Å ÎÇ†Ïßú Ìå®ÌÑ¥
        specific_date_patterns = [
            r'\d{4}ÎÖÑ\s*\d{1,2}Ïõî\s*\d{1,2}Ïùº',
            r'\d{4}-\d{1,2}-\d{1,2}',
            r'\d{1,2}/\d{1,2}',
            r'\d{1,2}Ïõî\s*\d{1,2}Ïùº'
        ]
        
        # ÏÉÅÎåÄÏ†Å ÎÇ†Ïßú Ìå®ÌÑ¥
        relative_date_patterns = [
            'Ïñ¥Ï†ú', 'Ïò§Îäò', 'ÎÇ¥Ïùº', 'ÏµúÍ∑º', 'ÏßÄÎÇú', 'Ïù¥Î≤à', 'Ï†ÄÎ≤à'
        ]
        
        has_specific_date = any(re.search(pattern, question) for pattern in specific_date_patterns)
        has_relative_date = any(pattern in question.lower() for pattern in relative_date_patterns)
        
        return has_specific_date or has_relative_date
    
    def _has_game_reference(self, question: str) -> bool:
        """Í≤ΩÍ∏∞ Í¥ÄÎ†® Ï∞∏Ï°∞Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏"""
        question_lower = question.lower()
        game_keywords = [
            'Í≤ΩÍ∏∞', 'Í≤åÏûÑ', 'ÏäπÎ∂Ä', 'Í≤∞Í≥º', 'Ïä§ÏΩîÏñ¥', 'Ï†êÏàò',
            'ÏäπÎ¶¨', 'Ìå®Î∞∞', 'Î¨¥ÏäπÎ∂Ä', 'Ïñ¥Îï†Ïñ¥', 'Ïñ¥Îï†ÎÇò', 'Ïñ¥ÎñªÍ≤å'
        ]
        
        return any(keyword in question_lower for keyword in game_keywords)
    
    def _is_daily_games_question(self, question: str) -> bool:
        """ÌïòÎ£®Ïπò Î™®Îì† Í≤ΩÍ∏∞ Í≤∞Í≥ºÎ•º ÏöîÏ≤≠ÌïòÎäî ÏßàÎ¨∏Ïù∏ÏßÄ ÌåêÎã®"""
        question_lower = question.lower()
        
        # Í≤ΩÍ∏∞ Í≤∞Í≥º Í¥ÄÎ†® ÌÇ§ÏõåÎìúÎì§ (Í≥ºÍ±∞ Í≤ΩÍ∏∞ Í≤∞Í≥º)
        result_keywords = [
            'Í≤ΩÍ∏∞ Í≤∞Í≥º', 'Í≤ΩÍ∏∞Îì§', 'Î™®Îì† Í≤ΩÍ∏∞', 'Ï†ÑÏ≤¥ Í≤ΩÍ∏∞', 'Í∑∏ÎÇ† Í≤ΩÍ∏∞',
            'Í≤ΩÍ∏∞ ÌòÑÌô©', 'Í≤ΩÍ∏∞ ÏÉÅÌô©', 'Ïò§ÎäòÏùò Í≤ΩÍ∏∞', 'Ïñ¥Ï†úÏùò Í≤ΩÍ∏∞', 
            'Í≤ΩÍ∏∞ ÏöîÏïΩ', 'Ïñ¥Îï†Ïñ¥', 'Ïñ¥Îï†ÎÇò', 'Ïñ¥ÎñªÍ≤å Îêê', 'Î∂ÑÏÑù'
        ]
        
        # Í≤ΩÍ∏∞ ÏùºÏ†ï Í¥ÄÎ†® ÌÇ§ÏõåÎìúÎì§ (ÎØ∏Îûò Í≤ΩÍ∏∞ ÏùºÏ†ï)
        schedule_keywords = [
            'Í≤ΩÍ∏∞ ÏùºÏ†ï', 'ÏùºÏ†ï', 'Ïä§ÏºÄÏ§Ñ', 'ÏòàÏ†ï', 'ÏïûÏúºÎ°ú', 'Îã§Ïùå', 'ÎÇ¥ÏùºÏùò Í≤ΩÍ∏∞'
        ]
        
        # ÌäπÏ†ï ÌåÄÏù¥ Ïñ∏Í∏âÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞
        team_keywords = [
            'ÌïúÌôî', 'ÎëêÏÇ∞', 'KIA', 'ÌÇ§ÏõÄ', 'Î°ØÎç∞', 'ÏÇºÏÑ±', 'SSG', 'KT', 'NC', 'LG',
            'Ïù¥Í∏ÄÏä§', 'Î≤†Ïñ¥Ïä§', 'ÌÉÄÏù¥Í±∞Ï¶à', 'ÌûàÏñ¥Î°úÏ¶à', 'ÏûêÏù¥Ïñ∏Ï∏†', 'ÎùºÏù¥Ïò®Ï¶à',
            'ÎûúÎçîÏä§', 'ÏúÑÏ¶à', 'Îã§Ïù¥ÎÖ∏Ïä§', 'Ìä∏ÏúàÏä§'
        ]
        
        has_result_keyword = any(keyword in question_lower for keyword in result_keywords)
        has_schedule_keyword = any(keyword in question_lower for keyword in schedule_keywords)
        has_team_keyword = any(keyword in question_lower for keyword in team_keywords)
        
        # Í≤ΩÍ∏∞ Í≤∞Í≥º ÌÇ§ÏõåÎìúÍ∞Ä ÏûàÍ≥†, ÏùºÏ†ï ÌÇ§ÏõåÎìúÍ∞Ä ÏóÜÏúºÎ©∞, ÌäπÏ†ï ÌåÄÏù¥ Ïñ∏Í∏âÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞
        return has_result_keyword and not has_schedule_keyword and not has_team_keyword
    
    def _is_daily_schedule_question(self, question: str) -> bool:
        """ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ ÏùºÏ†ïÏùÑ ÏöîÏ≤≠ÌïòÎäî ÏßàÎ¨∏Ïù∏ÏßÄ ÌåêÎã®"""
        question_lower = question.lower()
        
        # Í≤ΩÍ∏∞ ÏùºÏ†ï Í¥ÄÎ†® ÌÇ§ÏõåÎìúÎì§
        schedule_keywords = [
            'Í≤ΩÍ∏∞ ÏùºÏ†ï', 'ÏùºÏ†ï', 'Ïä§ÏºÄÏ§Ñ', 'ÏòàÏ†ï', 'ÏïûÏúºÎ°ú', 'Îã§Ïùå'
        ]
        
        # ÌäπÏ†ï ÌåÄÏù¥ Ïñ∏Í∏âÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞
        team_keywords = [
            'ÌïúÌôî', 'ÎëêÏÇ∞', 'KIA', 'ÌÇ§ÏõÄ', 'Î°ØÎç∞', 'ÏÇºÏÑ±', 'SSG', 'KT', 'NC', 'LG',
            'Ïù¥Í∏ÄÏä§', 'Î≤†Ïñ¥Ïä§', 'ÌÉÄÏù¥Í±∞Ï¶à', 'ÌûàÏñ¥Î°úÏ¶à', 'ÏûêÏù¥Ïñ∏Ï∏†', 'ÎùºÏù¥Ïò®Ï¶à',
            'ÎûúÎçîÏä§', 'ÏúÑÏ¶à', 'Îã§Ïù¥ÎÖ∏Ïä§', 'Ìä∏ÏúàÏä§'
        ]
        
        has_schedule_keyword = any(keyword in question_lower for keyword in schedule_keywords)
        has_team_keyword = any(keyword in question_lower for keyword in team_keywords)
        
        # ÏùºÏ†ï ÌÇ§ÏõåÎìúÍ∞Ä ÏûàÍ≥† ÌäπÏ†ï ÌåÄÏù¥ Ïñ∏Í∏âÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞
        return has_schedule_keyword and not has_team_keyword
    
    async def _handle_current_game_question(self, question: str) -> str:
        """ÌòÑÏû¨ ÏßÑÌñâÏ§ëÏù∏ Í≤ΩÍ∏∞ ÏßàÎ¨∏ Ï≤òÎ¶¨"""
        try:
            print(f"üîç ÌòÑÏû¨ ÏßÑÌñâÏ§ëÏù∏ Í≤ΩÍ∏∞ ÏßàÎ¨∏ Ï≤òÎ¶¨ ÏãúÏûë: {question}")
            
            # ÏßàÎ¨∏ÏóêÏÑú ÌåÄ Ï†ïÎ≥¥ Ï∂îÏ∂ú
            team_info = self._extract_team_from_question(question)
            print(f"üîç Ï∂îÏ∂úÎêú ÌåÄ: {team_info}")
            
            # Ïò§Îäò ÎÇ†ÏßúÎ°ú Í≤ΩÍ∏∞ Ï°∞Ìöå
            from datetime import datetime
            today = datetime.now().strftime("%Y-%m-%d")
            
            # Ìï¥Îãπ ÌåÄÏùò Ïò§Îäò Í≤ΩÍ∏∞ Ï°∞Ìöå
            if team_info:
                team_code_mapping = {
                    'ÌïúÌôî': 'HH', 'ÎëêÏÇ∞': 'OB', 'KIA': 'HT', 'ÌÇ§ÏõÄ': 'WO',
                    'Î°ØÎç∞': 'LT', 'ÏÇºÏÑ±': 'SS', 'SSG': 'SK', 'KT': 'KT',
                    'NC': 'NC', 'LG': 'LG'
                }
                team_code = team_code_mapping.get(team_info, team_info)
                
                # ÌôàÌåÄ ÎòêÎäî ÏõêÏ†ïÌåÄ Ï°∞Í±¥ÏúºÎ°ú Ï°∞Ìöå
                home_query = self.supabase.supabase.table("game_schedule").select("*").eq("game_date", today).eq("home_team_code", team_code)
                home_result = home_query.execute()
                
                away_query = self.supabase.supabase.table("game_schedule").select("*").eq("game_date", today).eq("away_team_code", team_code)
                away_result = away_query.execute()
                
                # Í≤∞Í≥º Ìï©ÏπòÍ∏∞
                games = []
                if home_result.data:
                    games.extend(home_result.data)
                if away_result.data:
                    games.extend(away_result.data)
                
                if not games:
                    return f"Ïò§Îäò {team_info} ÌåÄÏùò Í≤ΩÍ∏∞Í∞Ä ÏóÜÏäµÎãàÎã§."
                
                # Í∞ÄÏû• ÏµúÍ∑º Í≤ΩÍ∏∞ ÏÑ†ÌÉù (ÏãúÍ∞ÑÏàúÏúºÎ°ú Ï†ïÎ†¨)
                games.sort(key=lambda x: x.get('game_date_time', ''), reverse=True)
                current_game = games[0]
            else:
                # ÌåÄÏù¥ ÏßÄÏ†ïÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ Ïò§ÎäòÏùò Î™®Îì† Í≤ΩÍ∏∞ Ï§ë ÏßÑÌñâÏ§ëÏù∏ Í≤ΩÍ∏∞ Ï∞æÍ∏∞
                all_games_query = self.supabase.supabase.table("game_schedule").select("*").eq("game_date", today)
                all_games_result = all_games_query.execute()
                
                if not all_games_result.data:
                    return "Ïò§Îäò Í≤ΩÍ∏∞Í∞Ä ÏóÜÏäµÎãàÎã§."
                
                # ÏßÑÌñâÏ§ëÏù∏ Í≤ΩÍ∏∞ Ï∞æÍ∏∞ (LIVE ÏÉÅÌÉú)
                live_games = [game for game in all_games_result.data if game.get('status_code') == 'LIVE']
                
                if not live_games:
                    return "ÌòÑÏû¨ ÏßÑÌñâÏ§ëÏù∏ Í≤ΩÍ∏∞Í∞Ä ÏóÜÏäµÎãàÎã§."
                
                current_game = live_games[0]
            
            # Í≤ΩÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏ Î∞è API Ìò∏Ï∂ú
            game_id = current_game.get('game_id')
            if game_id:
                # APIÎ•º ÌÜµÌï¥ Ïã§Ï†ú Í≤ΩÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏
                api_status = await self._check_live_game_status_from_api(current_game)
                
                if api_status['status'] == 'in_progress':
                    return self._generate_in_progress_game_answer(question, [current_game], api_status)
                elif api_status['status'] == 'finished':
                    return self._generate_finished_game_answer(question, [current_game], api_status)
                elif api_status['status'] == 'not_started':
                    return self._generate_not_started_game_answer(question, [current_game], api_status)
            
            # API Ìò∏Ï∂ú Ïã§Ìå® Ïãú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉÅÌÉúÎ°ú Ï≤òÎ¶¨
            game_status_info = self._check_game_status_from_data([current_game])
            
            if game_status_info['is_game_question']:
                if game_status_info['status'] == 'in_progress':
                    return self._generate_in_progress_game_answer(question, [current_game], game_status_info)
                elif game_status_info['status'] == 'finished':
                    return self._generate_finished_game_answer(question, [current_game], game_status_info)
                elif game_status_info['status'] == 'not_started':
                    return self._generate_not_started_game_answer(question, [current_game], game_status_info)
            
            return "ÌòÑÏû¨ Í≤ΩÍ∏∞ Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§."
                
        except Exception as e:
            print(f"‚ùå ÌòÑÏû¨ Í≤ΩÍ∏∞ ÏßàÎ¨∏ Ï≤òÎ¶¨ Ïò§Î•ò: {e}")
            return f"ÌòÑÏû¨ Í≤ΩÍ∏∞ Ï†ïÎ≥¥ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}"
    
    async def _handle_daily_schedule_question(self, question: str) -> str:
        """ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ ÏùºÏ†ï Ï≤òÎ¶¨"""
        try:
            print(f"üîç ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ ÏùºÏ†ï ÏßàÎ¨∏ Ï≤òÎ¶¨ ÏãúÏûë: {question}")
            
            # ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ ÏùºÏ†ï Ï°∞Ìöå
            daily_games = await self._find_daily_games_via_sql(question)
            
            if not daily_games:
                return "Ìï¥Îãπ ÎÇ†ÏßúÏùò Í≤ΩÍ∏∞ ÏùºÏ†ïÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
            
            print(f"üîç Ï°∞ÌöåÎêú Í≤ΩÍ∏∞ ÏùºÏ†ï Ïàò: {len(daily_games)}Í∞ú")
            
            # Í≤ΩÍ∏∞ ÏùºÏ†ï ÏöîÏïΩ ÏÉùÏÑ±
            schedule_summary = self._generate_daily_schedule_summary(daily_games)
            
            print(f"‚úÖ ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ ÏùºÏ†ï Ï≤òÎ¶¨ ÏôÑÎ£å: {len(daily_games)}Í∞ú Í≤ΩÍ∏∞")
            return schedule_summary
                
        except Exception as e:
            print(f"‚ùå ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ ÏùºÏ†ï Ï≤òÎ¶¨ Ïò§Î•ò: {e}")
            return f"Í≤ΩÍ∏∞ ÏùºÏ†ï Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}"
    
    def _generate_daily_schedule_summary(self, daily_games: list) -> str:
        """ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ ÏùºÏ†ï ÏöîÏïΩ ÏÉùÏÑ±"""
        try:
            if not daily_games:
                return "Í≤ΩÍ∏∞ ÏùºÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§."
            
            # Ï≤´ Î≤àÏß∏ Í≤ΩÍ∏∞Ïùò ÎÇ†Ïßú ÏÇ¨Ïö©
            first_game_date = daily_games[0].get('game_date', '')
            if first_game_date and len(first_game_date) >= 10:
                formatted_date = f"{first_game_date[:4]}ÎÖÑ {first_game_date[5:7]}Ïõî {first_game_date[8:10]}Ïùº"
            else:
                formatted_date = first_game_date
            
            # Ï†ÑÏ≤¥ ÏùºÏ†ï ÏãúÏûë
            summary = f"üìÖ {formatted_date} KBO Í≤ΩÍ∏∞ ÏùºÏ†ï ({len(daily_games)}Í≤ΩÍ∏∞)\n"
            summary += "=" * 50 + "\n\n"
            
            # Í∞Å Í≤ΩÍ∏∞ ÏùºÏ†ï Ï∂îÍ∞Ä
            for i, game in enumerate(daily_games, 1):
                home_team = game.get('home_team_name', '')
                away_team = game.get('away_team_name', '')
                stadium = game.get('stadium', '')
                game_time = game.get('game_date_time', '')
                status_code = game.get('status_code', '')
                
                # ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ
                if game_time and len(game_time) >= 16:
                    # 2025-09-22T18:30:00+00:00 -> 18:30
                    time_part = game_time[11:16]
                else:
                    time_part = "ÏãúÍ∞Ñ ÎØ∏Ï†ï"
                
                summary += f"üèüÔ∏è Í≤ΩÍ∏∞ {i}: {away_team} vs {home_team}\n"
                summary += f"   üìç Í≤ΩÍ∏∞Ïû•: {stadium}\n"
                summary += f"   ‚è∞ Í≤ΩÍ∏∞ÏãúÍ∞Ñ: {time_part}\n"
                
                # Í≤ΩÍ∏∞ ÏÉÅÌÉúÏóê Îî∞Î•∏ Ï∂îÍ∞Ä Ï†ïÎ≥¥
                if status_code == 'BEFORE':
                    summary += f"   üìã ÏÉÅÌÉú: ÏòàÏ†ï\n"
                elif status_code == 'LIVE':
                    summary += f"   üìã ÏÉÅÌÉú: ÏßÑÌñâÏ§ë\n"
                elif status_code == 'RESULT':
                    summary += f"   üìã ÏÉÅÌÉú: Ï¢ÖÎ£å\n"
                else:
                    summary += f"   üìã ÏÉÅÌÉú: {status_code}\n"
                
                summary += "\n"
            
            return summary
            
        except Exception as e:
            print(f"‚ùå ÌïòÎ£®Ïπò ÏùºÏ†ï ÏöîÏïΩ ÏÉùÏÑ± Ïò§Î•ò: {e}")
            return f"{len(daily_games)}Í∞ú Í≤ΩÍ∏∞Í∞Ä ÏòàÏ†ïÎêòÏñ¥ ÏûàÏäµÎãàÎã§."
    
    async def _handle_daily_games_analysis(self, question: str) -> str:
        """ÌïòÎ£®Ïπò Î™®Îì† Í≤ΩÍ∏∞ Î∂ÑÏÑù Ï≤òÎ¶¨"""
        try:
            print(f"üîç ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ Î∂ÑÏÑù ÏßàÎ¨∏ Ï≤òÎ¶¨ ÏãúÏûë: {question}")
            
            # ÌïòÎ£®Ïπò Î™®Îì† Í≤ΩÍ∏∞ Ï†ïÎ≥¥ Ï°∞Ìöå
            daily_games = await self._find_daily_games_via_sql(question)
            
            if not daily_games:
                return "Ìï¥Îãπ ÎÇ†ÏßúÏùò Í≤ΩÍ∏∞ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
            
            print(f"üîç Ï°∞ÌöåÎêú Í≤ΩÍ∏∞ Ïàò: {len(daily_games)}Í∞ú")
            
            # Í∞Å Í≤ΩÍ∏∞Ïóê ÎåÄÌï¥ Î∂ÑÏÑù ÏàòÌñâ
            game_summaries = []
            
            for i, game_info in enumerate(daily_games):
                game_id = game_info.get('game_id')
                if not game_id:
                    continue
                
                print(f"üîç Í≤ΩÍ∏∞ {i+1}/{len(daily_games)} Î∂ÑÏÑù Ï§ë: {game_id}")
                
                try:
                    # Í≤ΩÍ∏∞ Í∏∞Î°ù Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
                    record_data = await game_record_service.get_game_record(game_id)
                    
                    if not record_data:
                        # API Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ Í∏∞Î≥∏ Ï†ïÎ≥¥Îßå ÏÇ¨Ïö©
                        summary = self._generate_basic_game_summary(game_info)
                        game_summaries.append(summary)
                        continue
                    
                    # Í≤ΩÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù
                    analysis = game_record_service.analyze_game_record(record_data)
                    
                    # ÏûêÏó∞Ïñ¥ ÏöîÏïΩ ÏÉùÏÑ±
                    summary = game_record_service.generate_game_summary(analysis)
                    game_summaries.append(summary)
                    
                except Exception as e:
                    print(f"‚ùå Í≤ΩÍ∏∞ {game_id} Î∂ÑÏÑù Ïò§Î•ò: {e}")
                    # Ïò§Î•ò Î∞úÏÉù Ïãú Í∏∞Î≥∏ Ï†ïÎ≥¥ÎùºÎèÑ Ï†úÍ≥µ
                    summary = self._generate_basic_game_summary(game_info)
                    game_summaries.append(summary)
            
            # Ï†ÑÏ≤¥ ÏöîÏïΩ ÏÉùÏÑ±
            if game_summaries:
                final_summary = self._generate_daily_summary(daily_games, game_summaries)
                print(f"‚úÖ ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ Î∂ÑÏÑù ÏôÑÎ£å: {len(daily_games)}Í∞ú Í≤ΩÍ∏∞")
                return final_summary
            else:
                return "Í≤ΩÍ∏∞ Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
                
        except Exception as e:
            print(f"‚ùå ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ Î∂ÑÏÑù Ïò§Î•ò: {e}")
            return f"Í≤ΩÍ∏∞ Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}"
    
    def _generate_basic_game_summary(self, game_info: dict) -> str:
        """Í∏∞Î≥∏ Í≤ΩÍ∏∞ Ï†ïÎ≥¥Î°ú ÏöîÏïΩ ÏÉùÏÑ±"""
        try:
            game_date = game_info.get('game_date', '')
            home_team = game_info.get('home_team_name', '')
            away_team = game_info.get('away_team_name', '')
            stadium = game_info.get('stadium', '')
            home_score = game_info.get('home_team_score', 0)
            away_score = game_info.get('away_team_score', 0)
            winner = game_info.get('winner', '')
            status_info = game_info.get('status_info', '')
            
            # ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ
            if game_date and len(game_date) >= 10:
                formatted_date = f"{game_date[:4]}ÎÖÑ {game_date[5:7]}Ïõî {game_date[8:10]}Ïùº"
            else:
                formatted_date = game_date
            
            # Í∏∞Î≥∏ ÏöîÏïΩ
            summary = f"üìÖ {formatted_date} {stadium}ÏóêÏÑú Ïó¥Î¶∞ {away_team} vs {home_team} Í≤ΩÍ∏∞\n"
            
            # ÏäπÎ∂Ä Í≤∞Í≥º
            if winner == 'HOME':
                summary += f"üèÜ {home_team} {home_score} - {away_score} {away_team}Î°ú ÏäπÎ¶¨"
            elif winner == 'AWAY':
                summary += f"üèÜ {away_team} {away_score} - {home_score} {home_team}Î°ú ÏäπÎ¶¨"
            else:
                summary += f"üèÜ {away_team} {away_score} - {home_score} {home_team}"
            
            if status_info:
                summary += f"\n‚öæ Í≤ΩÍ∏∞ ÏÉÅÌô©: {status_info}"
            
            return summary
            
        except Exception as e:
            print(f"‚ùå Í∏∞Î≥∏ Í≤ΩÍ∏∞ ÏöîÏïΩ ÏÉùÏÑ± Ïò§Î•ò: {e}")
            return f"Í≤ΩÍ∏∞ Ï†ïÎ≥¥: {game_info.get('home_team_name', '')} vs {game_info.get('away_team_name', '')}"
    
    def _generate_daily_summary(self, daily_games: list, game_summaries: list) -> str:
        """ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ Ï†ÑÏ≤¥ ÏöîÏïΩ ÏÉùÏÑ±"""
        try:
            if not daily_games:
                return "Í≤ΩÍ∏∞ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§."
            
            # Ï≤´ Î≤àÏß∏ Í≤ΩÍ∏∞Ïùò ÎÇ†Ïßú ÏÇ¨Ïö©
            first_game_date = daily_games[0].get('game_date', '')
            if first_game_date and len(first_game_date) >= 10:
                formatted_date = f"{first_game_date[:4]}ÎÖÑ {first_game_date[5:7]}Ïõî {first_game_date[8:10]}Ïùº"
            else:
                formatted_date = first_game_date
            
            # Ï†ÑÏ≤¥ ÏöîÏïΩ ÏãúÏûë
            summary = f"üìÖ {formatted_date} KBO Í≤ΩÍ∏∞ Í≤∞Í≥º ({len(daily_games)}Í≤ΩÍ∏∞)\n"
            summary += "=" * 50 + "\n\n"
            
            # Í∞Å Í≤ΩÍ∏∞ ÏöîÏïΩ Ï∂îÍ∞Ä
            for i, game_summary in enumerate(game_summaries, 1):
                summary += f"üèüÔ∏è Í≤ΩÍ∏∞ {i}:\n"
                summary += game_summary + "\n\n"
            
            # Í∞ÑÎã®Ìïú ÌÜµÍ≥Ñ Ï∂îÍ∞Ä
            home_wins = sum(1 for game in daily_games if game.get('winner') == 'HOME')
            away_wins = sum(1 for game in daily_games if game.get('winner') == 'AWAY')
            
            summary += f"üìä Í≤ΩÍ∏∞ Í≤∞Í≥º ÏöîÏïΩ:\n"
            summary += f"   ÌôàÌåÄ ÏäπÎ¶¨: {home_wins}Í≤ΩÍ∏∞\n"
            summary += f"   ÏõêÏ†ïÌåÄ ÏäπÎ¶¨: {away_wins}Í≤ΩÍ∏∞\n"
            
            return summary
            
        except Exception as e:
            print(f"‚ùå ÌïòÎ£®Ïπò ÏöîÏïΩ ÏÉùÏÑ± Ïò§Î•ò: {e}")
            return f"{len(daily_games)}Í∞ú Í≤ΩÍ∏∞Í∞Ä ÏûàÏóàÏäµÎãàÎã§."
    
    async def _handle_game_analysis_question(self, question: str) -> str:
        """Í≤ΩÍ∏∞ Î∂ÑÏÑù ÏßàÎ¨∏ Ï≤òÎ¶¨"""
        try:
            print(f"üîç Í≤ΩÍ∏∞ Î∂ÑÏÑù ÏßàÎ¨∏ Ï≤òÎ¶¨ ÏãúÏûë: {question}")
            
            # SQLÏùÑ ÌÜµÌï¥ Í≤ΩÍ∏∞ Ï†ïÎ≥¥ Ï°∞Ìöå
            game_info = await self._find_game_info_via_sql(question)
            
            if not game_info:
                return "Ìï¥Îãπ Ï°∞Í±¥Ïóê ÎßûÎäî Í≤ΩÍ∏∞ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
            
            game_id = game_info.get('game_id')
            if not game_id:
                return "Í≤ΩÍ∏∞ IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
            
            print(f"üîç Ï∞æÏùÄ Í≤åÏûÑ ID: {game_id}")
            
            # Í≤ΩÍ∏∞ Í∏∞Î°ù Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
            record_data = await game_record_service.get_game_record(game_id)
            
            if not record_data:
                return f"Í≤ΩÍ∏∞ Í∏∞Î°ù Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§."
            
            # API Ìò∏Ï∂úÏùÑ ÌÜµÌïú Ïã§Ï†ú Í≤ΩÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏
            api_game_status = self._parse_api_game_status(record_data)
            
            # Í≤ΩÍ∏∞ ÏÉÅÌÉúÏóê Îî∞Î•∏ Îã§Î•∏ Ï≤òÎ¶¨
            if api_game_status['status'] == 'in_progress':
                # ÏßÑÌñâÏ§ëÏù∏ Í≤ΩÍ∏∞Ïóê ÎåÄÌïú ÎãµÎ≥Ä
                return self._generate_in_progress_game_answer(question, [game_info], {
                    'status': 'in_progress',
                    'game_data': game_info,
                    'api_data': record_data,
                    'current_inning': api_game_status.get('current_inning', ''),
                    'current_score': api_game_status.get('current_score', {}),
                    'status_info': api_game_status.get('status_info', '')
                })
            elif api_game_status['status'] == 'finished':
                # Ï¢ÖÎ£åÎêú Í≤ΩÍ∏∞Ïóê ÎåÄÌïú ÎãµÎ≥Ä
                return self._generate_finished_game_answer(question, [game_info], {
                    'status': 'finished',
                    'game_data': game_info,
                    'api_data': record_data,
                    'current_inning': api_game_status.get('current_inning', ''),
                    'current_score': api_game_status.get('current_score', {}),
                    'status_info': api_game_status.get('status_info', '')
                })
            elif api_game_status['status'] == 'not_started':
                # ÏãúÏûë Ï†Ñ Í≤ΩÍ∏∞Ïóê ÎåÄÌïú ÎãµÎ≥Ä
                return self._generate_not_started_game_answer(question, [game_info], {
                    'status': 'not_started',
                    'game_data': game_info,
                    'api_data': record_data,
                    'current_inning': '',
                    'current_score': {},
                    'status_info': 'Í≤ΩÍ∏∞ ÏòàÏ†ï'
                })
            else:
                # Í∏∞Ï°¥ Î∞©ÏãùÏúºÎ°ú Ï≤òÎ¶¨ (API ÏÉÅÌÉú Î∂àÎ™ÖÏù∏ Í≤ΩÏö∞)
                analysis = game_record_service.analyze_game_record(record_data)
                summary = game_record_service.generate_game_summary(analysis)
                print(f"‚úÖ Í≤ΩÍ∏∞ Î∂ÑÏÑù ÏôÑÎ£å")
                return summary
            
        except Exception as e:
            print(f"‚ùå Í≤ΩÍ∏∞ Î∂ÑÏÑù Ï≤òÎ¶¨ Ïò§Î•ò: {e}")
            return f"Í≤ΩÍ∏∞ Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}"
    
    def _extract_date_from_question(self, question: str) -> str:
        """ÏßàÎ¨∏ÏóêÏÑú ÎÇ†Ïßú Ï†ïÎ≥¥ Ï∂îÏ∂ú"""
        # YYYYÎÖÑ MMÏõî DDÏùº Ìå®ÌÑ¥
        pattern1 = r'(\d{4})ÎÖÑ\s*(\d{1,2})Ïõî\s*(\d{1,2})Ïùº'
        match1 = re.search(pattern1, question)
        if match1:
            year, month, day = match1.groups()
            return f"{year}{month.zfill(2)}{day.zfill(2)}"
        
        # YYYY-MM-DD Ìå®ÌÑ¥
        pattern2 = r'(\d{4})-(\d{1,2})-(\d{1,2})'
        match2 = re.search(pattern2, question)
        if match2:
            year, month, day = match2.groups()
            return f"{year}{month.zfill(2)}{day.zfill(2)}"
        
        # MM/DD Ìå®ÌÑ¥ (Ïò¨Ìï¥ Í∏∞Ï§Ä)
        pattern3 = r'(\d{1,2})/(\d{1,2})'
        match3 = re.search(pattern3, question)
        if match3:
            from datetime import datetime
            month, day = match3.groups()
            current_year = datetime.now().year
            return f"{current_year}{month.zfill(2)}{day.zfill(2)}"
        
        # MMÏõî DDÏùº Ìå®ÌÑ¥ (Ïò¨Ìï¥ Í∏∞Ï§Ä)
        pattern4 = r'(\d{1,2})Ïõî\s*(\d{1,2})Ïùº'
        match4 = re.search(pattern4, question)
        if match4:
            from datetime import datetime
            month, day = match4.groups()
            current_year = datetime.now().year
            return f"{current_year}{month.zfill(2)}{day.zfill(2)}"
        
        return None
    
    def _extract_team_from_question(self, question: str) -> str:
        """ÏßàÎ¨∏ÏóêÏÑú ÌåÄ Ï†ïÎ≥¥ Ï∂îÏ∂ú"""
        team_mappings = {
            'ÌïúÌôî': 'ÌïúÌôî', 'ÌïúÌôîÏù¥Í∏ÄÏä§': 'ÌïúÌôî', 'Ïù¥Í∏ÄÏä§': 'ÌïúÌôî',
            'ÎëêÏÇ∞': 'ÎëêÏÇ∞', 'ÎëêÏÇ∞Î≤†Ïñ¥Ïä§': 'ÎëêÏÇ∞', 'Î≤†Ïñ¥Ïä§': 'ÎëêÏÇ∞',
            'KIA': 'KIA', 'KIAÌÉÄÏù¥Í±∞Ï¶à': 'KIA', 'ÌÉÄÏù¥Í±∞Ï¶à': 'KIA',
            'ÌÇ§ÏõÄ': 'ÌÇ§ÏõÄ', 'ÌÇ§ÏõÄÌûàÏñ¥Î°úÏ¶à': 'ÌÇ§ÏõÄ', 'ÌûàÏñ¥Î°úÏ¶à': 'ÌÇ§ÏõÄ',
            'Î°ØÎç∞': 'Î°ØÎç∞', 'Î°ØÎç∞ÏûêÏù¥Ïñ∏Ï∏†': 'Î°ØÎç∞', 'ÏûêÏù¥Ïñ∏Ï∏†': 'Î°ØÎç∞',
            'ÏÇºÏÑ±': 'ÏÇºÏÑ±', 'ÏÇºÏÑ±ÎùºÏù¥Ïò®Ï¶à': 'ÏÇºÏÑ±', 'ÎùºÏù¥Ïò®Ï¶à': 'ÏÇºÏÑ±',
            'SSG': 'SSG', 'SSGÎûúÎçîÏä§': 'SSG', 'ÎûúÎçîÏä§': 'SSG',
            'KT': 'KT', 'KTÏúÑÏ¶à': 'KT', 'ÏúÑÏ¶à': 'KT',
            'NC': 'NC', 'NCÎã§Ïù¥ÎÖ∏Ïä§': 'NC', 'Îã§Ïù¥ÎÖ∏Ïä§': 'NC',
            'LG': 'LG', 'LGÌä∏ÏúàÏä§': 'LG', 'Ìä∏ÏúàÏä§': 'LG'
        }
        
        for team_keyword, team_name in team_mappings.items():
            if team_keyword in question:
                return team_name
        
        return None
    
    async def _find_game_info_via_sql(self, question: str) -> dict:
        """SQLÏùÑ ÌÜµÌï¥ Í≤ΩÍ∏∞ Ï†ïÎ≥¥ Ï°∞Ìöå"""
        try:
            from datetime import datetime, timedelta
            
            # ÏßàÎ¨∏ÏóêÏÑú ÎÇ†ÏßúÏôÄ ÌåÄ Ï†ïÎ≥¥ Ï∂îÏ∂ú
            date_info = self._extract_date_from_question(question)
            team_info = self._extract_team_from_question(question)
            
            print(f"üîç Ï∂îÏ∂úÎêú ÎÇ†Ïßú: {date_info}")
            print(f"üîç Ï∂îÏ∂úÎêú ÌåÄ: {team_info}")
            
            # ÏÉÅÎåÄÏ†Å ÎÇ†Ïßú Ï≤òÎ¶¨
            if not date_info:
                date_info = self._extract_relative_date(question)
                print(f"üîç ÏÉÅÎåÄÏ†Å ÎÇ†Ïßú Ï∂îÏ∂ú Í≤∞Í≥º: {date_info}")
            
            # SQL ÏøºÎ¶¨ Íµ¨ÏÑ±
            query = self.supabase.supabase.table("game_schedule").select("*")
            
            # ÎÇ†Ïßú Ï°∞Í±¥ Ï∂îÍ∞Ä (ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå) - Ïã§Ï†ú Ïª¨ÎüºÎ™ÖÏùÄ game_date
            if date_info:
                # YYYYMMDD ÌòïÏãùÏùÑ YYYY-MM-DD ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
                if len(date_info) == 8:
                    formatted_date = f"{date_info[:4]}-{date_info[4:6]}-{date_info[6:8]}"
                    query = query.eq("game_date", formatted_date)
                else:
                    query = query.eq("game_date", date_info)
            
            # ÌåÄ Ï°∞Í±¥ Ï∂îÍ∞Ä
            if team_info:
                # ÌåÄ ÏΩîÎìú Îß§Ìïë
                team_code_mapping = {
                    'ÌïúÌôî': 'HH', 'ÎëêÏÇ∞': 'OB', 'KIA': 'HT', 'ÌÇ§ÏõÄ': 'WO',
                    'Î°ØÎç∞': 'LT', 'ÏÇºÏÑ±': 'SS', 'SSG': 'SK', 'KT': 'KT',
                    'NC': 'NC', 'LG': 'LG'
                }
                
                team_code = team_code_mapping.get(team_info, team_info)
                # Supabase OR Ï°∞Í±¥ÏùÑ Îëê Í∞úÏùò ÏøºÎ¶¨Î°ú Î∂ÑÎ¶¨ÌïòÏó¨ Ï≤òÎ¶¨
                # Î®ºÏ†Ä ÌôàÌåÄ Ï°∞Í±¥ÏúºÎ°ú Ï°∞Ìöå
                home_query = self.supabase.supabase.table("game_schedule").select("*")
                if date_info:
                    # YYYYMMDD ÌòïÏãùÏùÑ YYYY-MM-DD ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
                    if len(date_info) == 8:
                        formatted_date = f"{date_info[:4]}-{date_info[4:6]}-{date_info[6:8]}"
                        home_query = home_query.eq("game_date", formatted_date)
                    else:
                        home_query = home_query.eq("game_date", date_info)
                home_query = home_query.eq("home_team_code", team_code).order("game_date", desc=True).limit(1)
                home_result = home_query.execute()
                
                if home_result.data:
                    return home_result.data[0]
                
                # ÌôàÌåÄ Ï°∞Í±¥ÏóêÏÑú Í≤∞Í≥ºÍ∞Ä ÏóÜÏúºÎ©¥ ÏõêÏ†ïÌåÄ Ï°∞Í±¥ÏúºÎ°ú Ï°∞Ìöå
                away_query = self.supabase.supabase.table("game_schedule").select("*")
                if date_info:
                    # YYYYMMDD ÌòïÏãùÏùÑ YYYY-MM-DD ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
                    if len(date_info) == 8:
                        formatted_date = f"{date_info[:4]}-{date_info[4:6]}-{date_info[6:8]}"
                        away_query = away_query.eq("game_date", formatted_date)
                    else:
                        away_query = away_query.eq("game_date", date_info)
                away_query = away_query.eq("away_team_code", team_code).order("game_date", desc=True).limit(1)
                away_result = away_query.execute()
                
                if away_result.data:
                    return away_result.data[0]
                
                return None
            
            # ÏµúÏã† Í≤ΩÍ∏∞ Ïö∞ÏÑ† Ï†ïÎ†¨
            query = query.order("game_date", desc=True).limit(1)
            
            result = query.execute()
            
            if result.data and len(result.data) > 0:
                return result.data[0]
            
            # ÎÇ†Ïßú Ï†ïÎ≥¥Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ ÏµúÍ∑º Í≤ΩÍ∏∞ Ï°∞Ìöå ÏãúÎèÑ
            if not date_info and team_info:
                print("üîç ÎÇ†Ïßú Ï†ïÎ≥¥Í∞Ä ÏóÜÏñ¥ÏÑú ÏµúÍ∑º Í≤ΩÍ∏∞ Ï°∞Ìöå ÏãúÎèÑ")
                return await self._find_recent_games_without_date(team_info)
            
            return None
            
        except Exception as e:
            print(f"‚ùå SQL Í∏∞Î∞ò Í≤ΩÍ∏∞ Ï†ïÎ≥¥ Ï°∞Ìöå Ïò§Î•ò: {e}")
            return None
    
    async def _find_daily_games_via_sql(self, question: str) -> list:
        """SQLÏùÑ ÌÜµÌï¥ ÌïòÎ£®Ïπò Î™®Îì† Í≤ΩÍ∏∞ Ï†ïÎ≥¥ Ï°∞Ìöå"""
        try:
            from datetime import datetime, timedelta
            
            # ÏßàÎ¨∏ÏóêÏÑú ÎÇ†ÏßúÏôÄ ÌåÄ Ï†ïÎ≥¥ Ï∂îÏ∂ú
            date_info = self._extract_date_from_question(question)
            team_info = self._extract_team_from_question(question)
            
            print(f"üîç Ï∂îÏ∂úÎêú ÎÇ†Ïßú: {date_info}")
            print(f"üîç Ï∂îÏ∂úÎêú ÌåÄ: {team_info}")
            
            # ÏÉÅÎåÄÏ†Å ÎÇ†Ïßú Ï≤òÎ¶¨ (ÎÇ†ÏßúÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞)
            if not date_info:
                relative_date = self._extract_relative_date(question)
                if relative_date:
                    date_info = relative_date
                    print(f"üîç ÏÉÅÎåÄÏ†Å ÎÇ†Ïßú Ï∂îÏ∂ú Í≤∞Í≥º: {date_info}")
            
            # ÎÇ†ÏßúÍ∞Ä ÏóÜÏúºÎ©¥ ÏµúÍ∑º Í≤ΩÍ∏∞ ÎÇ†Ïßú Ï°∞Ìöå
            if not date_info:
                # Í∞ÄÏû• ÏµúÍ∑º Í≤ΩÍ∏∞ ÎÇ†Ïßú Ï°∞Ìöå
                recent_query = self.supabase.supabase.table("game_schedule").select("game_date").order("game_date", desc=True).limit(1)
                recent_result = recent_query.execute()
                if recent_result.data:
                    date_info = recent_result.data[0]['game_date']
                    print(f"üîç ÏµúÍ∑º Í≤ΩÍ∏∞ ÎÇ†Ïßú: {date_info}")
            
            if not date_info:
                print("‚ùå Ï°∞ÌöåÌï† ÎÇ†ÏßúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                return []
            
            # SQL ÏøºÎ¶¨ Íµ¨ÏÑ± - Ìï¥Îãπ ÎÇ†ÏßúÏùò Î™®Îì† Í≤ΩÍ∏∞
            query = self.supabase.supabase.table("game_schedule").select("*")
            
            # ÎÇ†Ïßú Ï°∞Í±¥ Ï∂îÍ∞Ä - Ïã§Ï†ú Ïª¨ÎüºÎ™ÖÏùÄ game_date
            if len(date_info) == 8:  # YYYYMMDD ÌòïÏãù
                formatted_date = f"{date_info[:4]}-{date_info[4:6]}-{date_info[6:8]}"
                query = query.eq("game_date", formatted_date)
            else:  # YYYY-MM-DD ÌòïÏãù
                query = query.eq("game_date", date_info)
            
            # ÌåÄ Ï°∞Í±¥Ïù¥ ÏûàÎäî Í≤ΩÏö∞ ÌïÑÌÑ∞ÎßÅ
            if team_info:
                team_code_mapping = {
                    'ÌïúÌôî': 'HH', 'ÎëêÏÇ∞': 'OB', 'KIA': 'HT', 'ÌÇ§ÏõÄ': 'WO',
                    'Î°ØÎç∞': 'LT', 'ÏÇºÏÑ±': 'SS', 'SSG': 'SK', 'KT': 'KT',
                    'NC': 'NC', 'LG': 'LG'
                }
                team_code = team_code_mapping.get(team_info, team_info)
                
                # ÌôàÌåÄ ÎòêÎäî ÏõêÏ†ïÌåÄ Ï°∞Í±¥ÏúºÎ°ú ÌïÑÌÑ∞ÎßÅ - Îëê Í∞úÏùò ÏøºÎ¶¨Î°ú Î∂ÑÎ¶¨
                # Î®ºÏ†Ä ÌôàÌåÄ Ï°∞Í±¥ÏúºÎ°ú Ï°∞Ìöå
                home_query = self.supabase.supabase.table("game_schedule").select("*")
                if len(date_info) == 8:  # YYYYMMDD ÌòïÏãù
                    formatted_date = f"{date_info[:4]}-{date_info[4:6]}-{date_info[6:8]}"
                    home_query = home_query.eq("game_date", formatted_date)
                else:  # YYYY-MM-DD ÌòïÏãù
                    home_query = home_query.eq("game_date", date_info)
                home_query = home_query.eq("home_team_code", team_code).order("game_date_time")
                home_result = home_query.execute()
                
                # ÏõêÏ†ïÌåÄ Ï°∞Í±¥ÏúºÎ°ú Ï°∞Ìöå
                away_query = self.supabase.supabase.table("game_schedule").select("*")
                if len(date_info) == 8:  # YYYYMMDD ÌòïÏãù
                    formatted_date = f"{date_info[:4]}-{date_info[4:6]}-{date_info[6:8]}"
                    away_query = away_query.eq("game_date", formatted_date)
                else:  # YYYY-MM-DD ÌòïÏãù
                    away_query = away_query.eq("game_date", date_info)
                away_query = away_query.eq("away_team_code", team_code).order("game_date_time")
                away_result = away_query.execute()
                
                # Í≤∞Í≥º Ìï©ÏπòÍ∏∞
                all_games = []
                if home_result.data:
                    all_games.extend(home_result.data)
                if away_result.data:
                    all_games.extend(away_result.data)
                
                # Ï§ëÎ≥µ Ï†úÍ±∞ (game_id Í∏∞Ï§Ä)
                seen_ids = set()
                unique_games = []
                for game in all_games:
                    game_id = game.get('game_id')
                    if game_id and game_id not in seen_ids:
                        seen_ids.add(game_id)
                        unique_games.append(game)
                
                return unique_games
            
            # ÏãúÍ∞Ñ ÏàúÏúºÎ°ú Ï†ïÎ†¨
            result = query.order("game_date_time").execute()
            
            if result.data:
                print(f"‚úÖ {date_info} ÎÇ†Ïßú Í≤ΩÍ∏∞ {len(result.data)}Í∞ú Ï°∞Ìöå ÏÑ±Í≥µ")
                return result.data
            else:
                print(f"‚ùå {date_info} ÎÇ†ÏßúÏóê Í≤ΩÍ∏∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå")
                return []
                
        except Exception as e:
            print(f"‚ùå ÌïòÎ£®Ïπò Í≤ΩÍ∏∞ Ï†ïÎ≥¥ Ï°∞Ìöå Ïò§Î•ò: {e}")
            return []
    
    def _extract_relative_date(self, question: str) -> str:
        """ÏßàÎ¨∏ÏóêÏÑú ÏÉÅÎåÄÏ†Å ÎÇ†Ïßú Ï∂îÏ∂ú (YYYY-MM-DD ÌòïÏãù)"""
        from datetime import datetime, timedelta
        
        question_lower = question.lower()
        
        if 'Ïñ¥Ï†ú' in question_lower:
            yesterday = datetime.now() - timedelta(days=1)
            return yesterday.strftime("%Y-%m-%d")
        elif 'Ïò§Îäò' in question_lower:
            today = datetime.now()
            return today.strftime("%Y-%m-%d")
        elif 'ÎÇ¥Ïùº' in question_lower:
            tomorrow = datetime.now() + timedelta(days=1)
            return tomorrow.strftime("%Y-%m-%d")
        elif 'ÏµúÍ∑º' in question_lower or 'ÏßÄÎÇú' in question_lower:
            # ÏµúÍ∑º 7Ïùº ÎÇ¥Ïùò Í≤ΩÍ∏∞ Ï§ë Í∞ÄÏû• ÏµúÍ∑º Í≤ΩÍ∏∞
            recent_date = datetime.now() - timedelta(days=1)
            return recent_date.strftime("%Y-%m-%d")
        
        return None
    
    async def _find_recent_games_without_date(self, team_info: str = None) -> dict:
        """ÎÇ†Ïßú Ï†ïÎ≥¥Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ ÏµúÍ∑º Í≤ΩÍ∏∞ Ï°∞Ìöå"""
        try:
            query = self.supabase.supabase.table("game_schedule").select("*")
            
            # ÌåÄ Ï°∞Í±¥ Ï∂îÍ∞Ä
            if team_info:
                team_code_mapping = {
                    'ÌïúÌôî': 'HH', 'ÎëêÏÇ∞': 'OB', 'KIA': 'HT', 'ÌÇ§ÏõÄ': 'WO',
                    'Î°ØÎç∞': 'LT', 'ÏÇºÏÑ±': 'SS', 'SSG': 'SK', 'KT': 'KT',
                    'NC': 'NC', 'LG': 'LG'
                }
                
                team_code = team_code_mapping.get(team_info, team_info)
                # Supabase OR Ï°∞Í±¥ÏùÑ Îëê Í∞úÏùò ÏøºÎ¶¨Î°ú Î∂ÑÎ¶¨ÌïòÏó¨ Ï≤òÎ¶¨
                # Î®ºÏ†Ä ÌôàÌåÄ Ï°∞Í±¥ÏúºÎ°ú Ï°∞Ìöå
                home_query = self.supabase.supabase.table("game_schedule").select("*")
                home_query = home_query.eq("home_team_code", team_code).order("game_date", desc=True).limit(1)
                home_result = home_query.execute()
                
                if home_result.data:
                    return home_result.data[0]
                
                # ÌôàÌåÄ Ï°∞Í±¥ÏóêÏÑú Í≤∞Í≥ºÍ∞Ä ÏóÜÏúºÎ©¥ ÏõêÏ†ïÌåÄ Ï°∞Í±¥ÏúºÎ°ú Ï°∞Ìöå
                away_query = self.supabase.supabase.table("game_schedule").select("*")
                away_query = away_query.eq("away_team_code", team_code).order("game_date", desc=True).limit(1)
                away_result = away_query.execute()
                
                if away_result.data:
                    return away_result.data[0]
                
                return None
            
            # ÏµúÏã† Í≤ΩÍ∏∞ Ïö∞ÏÑ† Ï†ïÎ†¨ (ÎÇ†Ïßú ÎÇ¥Î¶ºÏ∞®Ïàú)
            query = query.order("game_date", desc=True).limit(1)
            
            result = query.execute()
            
            if result.data and len(result.data) > 0:
                return result.data[0]
            
            return None
            
        except Exception as e:
            print(f"‚ùå ÏµúÍ∑º Í≤ΩÍ∏∞ Ï°∞Ìöå Ïò§Î•ò: {e}")
            return None

def main():
    """ÌÖåÏä§Ìä∏ Ìï®Ïàò"""
    try:
        rag_text_to_sql = RAGTextToSQL()
        
        # ÌÖåÏä§Ìä∏ ÏßàÎ¨∏Îì§
        test_questions = [
            "ÌïúÌôî ÎßàÏßÄÎßâ Ïö∞ÏäπÎÖÑÎèÑ",
            "ÌïúÌôî Ïò¨Ìï¥ Î™áÎì±Ïù¥Ïïº?",
            "Î¨∏ÎèôÏ£º ÏÑ†Ïàò ÏÑ±Ï†ÅÏù¥ Ïñ¥Îïå?",
            "Ïò§Îäò Í≤ΩÍ∏∞ ÏùºÏ†ï",
            "ÎëêÏÇ∞ Ìà¨Ïàò Ï§ëÏóê Í∞ÄÏû• ÏûòÌïòÎäî Ìà¨ÏàòÍ∞Ä ÎàÑÍµ¨Ïïº?"
        ]
        
        for question in test_questions:
            print(f"\n{'='*50}")
            print(f"ÏßàÎ¨∏: {question}")
            answer = rag_text_to_sql.process_question(question)
            print(f"ÎãµÎ≥Ä: {answer}")
            
    except Exception as e:
        print(f"‚ùå ÌÖåÏä§Ìä∏ Ïã§Ìå®: {e}")

if __name__ == "__main__":
    main()
